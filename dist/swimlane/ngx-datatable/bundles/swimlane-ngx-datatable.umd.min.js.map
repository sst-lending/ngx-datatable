{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@swimlane/ngx-datatable/lib/services/scrollbar-helper.service.ts","ng://@swimlane/ngx-datatable/lib/services/dimensions-helper.service.ts","ng://@swimlane/ngx-datatable/lib/services/column-changes.service.ts","ng://@swimlane/ngx-datatable/lib/components/footer/footer-template.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/visibility.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/draggable.directive.ts","ng://@swimlane/ngx-datatable/lib/events.ts","ng://@swimlane/ngx-datatable/lib/directives/resizeable.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/orderable.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/long-press.directive.ts","ng://@swimlane/ngx-datatable/lib/components/body/scroller.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-group-header-template.directive.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-group-header.directive.ts","ng://@swimlane/ngx-datatable/lib/utils/column-prop-getters.ts","ng://@swimlane/ngx-datatable/lib/utils/tree.ts","ng://@swimlane/ngx-datatable/lib/utils/camel-case.ts","ng://@swimlane/ngx-datatable/lib/utils/id.ts","ng://@swimlane/ngx-datatable/lib/utils/column-helper.ts","ng://@swimlane/ngx-datatable/lib/types/column-mode.type.ts","ng://@swimlane/ngx-datatable/lib/types/selection.type.ts","ng://@swimlane/ngx-datatable/lib/types/sort.type.ts","ng://@swimlane/ngx-datatable/lib/types/contextmenu.type.ts","ng://@swimlane/ngx-datatable/lib/components/columns/column-header.directive.ts","ng://@swimlane/ngx-datatable/lib/components/columns/column-cell.directive.ts","ng://@swimlane/ngx-datatable/lib/components/columns/tree.directive.ts","ng://@swimlane/ngx-datatable/lib/components/columns/column.directive.ts","ng://@swimlane/ngx-datatable/lib/components/row-detail/row-detail-template.directive.ts","ng://@swimlane/ngx-datatable/lib/components/row-detail/row-detail.directive.ts","ng://@swimlane/ngx-datatable/lib/components/footer/footer.directive.ts","ng://@swimlane/ngx-datatable/lib/utils/column.ts","ng://@swimlane/ngx-datatable/lib/utils/row-height-cache.ts","ng://@swimlane/ngx-datatable/lib/utils/prefixes.ts","ng://@swimlane/ngx-datatable/lib/utils/translate.ts","ng://@swimlane/ngx-datatable/lib/components/body/body.component.ts","ng://@swimlane/ngx-datatable/lib/components/header/header.component.ts","ng://@swimlane/ngx-datatable/lib/utils/throttle.ts","ng://@swimlane/ngx-datatable/lib/utils/math.ts","ng://@swimlane/ngx-datatable/lib/types/sort-direction.type.ts","ng://@swimlane/ngx-datatable/lib/utils/sort.ts","ng://@swimlane/ngx-datatable/lib/components/datatable.component.ts","ng://@swimlane/ngx-datatable/lib/components/header/header-cell.component.ts","ng://@swimlane/ngx-datatable/lib/components/footer/footer.component.ts","ng://@swimlane/ngx-datatable/lib/components/footer/pager.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/progress-bar.component.ts","ng://@swimlane/ngx-datatable/lib/utils/keys.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-row.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-row-wrapper.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-cell.component.ts","ng://@swimlane/ngx-datatable/lib/utils/selection.ts","ng://@swimlane/ngx-datatable/lib/components/body/selection.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/summary/summary-row.component.ts","ng://@swimlane/ngx-datatable/lib/ngx-datatable.module.ts","ng://@swimlane/ngx-datatable/lib/utils/elm-from-point.ts","ng://@swimlane/ngx-datatable/lib/types/click.type.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__metadata","metadataKey","metadataValue","Reflect","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","ScrollbarHelper","document","width","getWidth","outer","createElement","style","visibility","msOverflowStyle","body","appendChild","widthNoScroll","offsetWidth","overflow","inner","widthWithScroll","parentNode","removeChild","Injectable","Inject","args","DOCUMENT","DimensionsHelper","getDimensions","element","getBoundingClientRect","ColumnChangesService","columnInputChanges","Subject","defineProperty","asObservable","onInputChange","DataTableFooterTemplateDirective","template","Directive","selector","TemplateRef","VisibilityDirective","zone","isVisible","visible","EventEmitter","ngOnInit","runCheck","ngOnDestroy","clearTimeout","timeout","onVisibilityChange","_this","run","emit","check","_a","nativeElement","offsetHeight","runOutsideAngular","setTimeout","ElementRef","NgZone","HostBinding","Output","DraggableDirective","dragX","dragY","dragStart","dragging","dragEnd","isDragging","ngOnChanges","changes","currentValue","dragModel","onMousedown","_destroySubscription","onMouseup","event","classList","remove","subscription","model","contains","preventDefault","mouseDownPos_1","x","clientX","y","clientY","mouseup","fromEvent","subscribe","ev","mouseMoveSub","pipe","takeUntil","move","add","mouseDownPos","left","top","unsubscribe","undefined","Input","window","ResizeableDirective","renderer","resizeEnabled","resize","resizing","ngAfterViewInit","renderer2","resizeHandle","addClass","destroyNode","closed","clientWidth","isHandle","initialWidth","mouseDownScreenX","screenX","stopPropagation","newWidth","overMinWidth","minWidth","underMaxWidth","maxWidth","host","[class.resizeable]","Renderer2","HostListener","OrderableDirective","differs","reorder","targetChanged","differ","find","create","ngAfterContentInit","updateSubscriptions","draggables","bind","forEach","d","diffs","diff","createMapDiffs","unsubscribe_1","previousValue","forEachAddedItem","onDragStart","onDragging","onDragEnd","forEachRemovedItem","positions","_b","tslib_1.__values","toArray","_c","dragger","elm","parseInt","offsetLeft","toString","prop","right","index","prevPos","target","isTarget","lastDraggingIndex","prevIndex","newIndex","initialIndex","targets","elementsFromPoint","pos","this_1","el","reduce","acc","curr","$$id","KeyValueDiffers","ContentChildren","descendants","LongPressDirective","pressEnabled","duration","longPressStart","longPressing","longPressEnd","mouseX","mouseY","pressing","isLongPressing","onMouseDown","which","pressModel","mouseEvent","onMouseMove","loop","xThres","Math","abs","yThres","endPress","ScrollerComponent","ngZone","scrollbarV","scrollbarH","scroll","scrollYPos","scrollXPos","prevScrollYPos","prevScrollXPos","_scrollEventListener","parentElement","onScrolled","addEventListener","removeEventListener","setOffset","offsetY","scrollTop","dom","requestAnimationFrame","scrollLeft","updateOffset","direction","Component","class","changeDetection","ChangeDetectionStrategy","OnPush","type","DatatableGroupHeaderTemplateDirective","DatatableGroupHeaderDirective","rowHeight","toggle","_templateInput","_templateQuery","toggleExpandGroup","group","expandAllGroups","collapseAllGroups","ContentChild","read","static","emptyStringGetter","getterForProp","numericIndexGetter","indexOf","deepValueGetter","shallowValueGetter","row","obj","fieldName","path","current","split","optionalGetterForProp","groupRowsByParents","rows","from","to","nodeById","l","node","TreeNode","uniqIDs","arr","item","toValue","parent_1","fromValue","parent","children","resolvedRows_1","flatten","level","treeStatus","f","recursive","child","Array","slice","camelCase","str","replace","trim","toLowerCase","a","b","c","toUpperCase","deCamelCase","match","id","random","pow","setColumnDefaults","columns","treeColumnFound","columns_1","columns_1_1","column","isNullOrUndefined","name","$$valueGetter","String","resizeable","sortable","draggable","canAutoResize","isTreeColumn","translateTemplates","templates","result","templates_1","templates_1_1","temp","col","props","getOwnPropertyNames","props_1","e_3","props_1_1","headerTemplate","cellTemplate","summaryFunc","summaryTemplate","standard","flex","force","single","multi","multiClick","cell","checkbox","header","DataTableColumnHeaderDirective","DataTableColumnCellDirective","DataTableColumnCellTreeToggle","DataTableColumnDirective","columnChangesService","isFirstChange","_cellTemplateInput","_cellTemplateQuery","_headerTemplateInput","_headerTemplateQuery","_treeToggleTemplateInput","_treeToggleTemplateQuery","DatatableRowDetailTemplateDirective","DatatableRowDetailDirective","toggleExpandRow","expandAllRows","collapseAllRows","DatatableFooterDirective","columnsByPin","cols","ret","center","cols_1","cols_1_1","frozenLeft","frozenRight","columnGroupWidths","groups","all","columnTotalWidth","total","floor","totalWidth","parseFloat","columnsTotalWidth","columns_2","columns_2_1","columnsByPinArr","val","colsByPinArr","colsByPin","RowHeightCache","treeArray","clearCache","initCache","details","detailRowHeight","externalVirtual","rowCount","rowIndexes","rowExpansions","isFn","isDetailFn","isNaN","Error","currentRowHeight","expanded","has","get","update","getRowIndex","scrollY","calcRowIndex","atRowIndex","byRowHeight","query","atIndex","sum","queryBetween","atIndexA","atIndexB","dataLength","blockSize","nextPos","styles","pre","cache","testStyle","prefix","getComputedStyle","documentElement","join","RegExp","lowercase","css","js","substr","getVendorPrefixedName","property","transform","backfaceVisibility","hasCSSTransforms","hasCSS3DTransforms","ua","navigator","userAgent","isSafari","test","translateXY","DataTableBodyComponent","cd","selected","page","activate","select","detailToggle","rowContextmenu","treeAction","rowHeightsCache","indexes","Map","getDetailRowHeight","rowDetail","rowTrackingFn","idx","trackByProp","_pageSize","recalcLayout","_rows","_columns","_offset","virtualization","_rowCount","innerWidth","_bodyHeight","selectionType","listener","toggleRowExpansion","toggleAllRows","updateIndexes","updateRows","markForCheck","groupHeader","updateOffsetY","offset","scroller","rowIndex","pageSize","onBodyScroll","offsetX","updatePage","first","ceil","last","clear","groupedRows","set","getRowHeight","getGroupHeight","getRowAndDetailHeight","getRowExpanded","getRowsStyles","getBottomSummaryRowStyles","position","hideIndicator","loadingIndicator","height","bodyHeight","externalPaging","max","min","refreshRowHeightCache","Set","getAdjustedViewPortIndex","viewPortFirstRowIndex","rowExpandedIdx","getRowExpandedIdx","splice","currentIndex","columnTrackingFn","stylesByGroup","widths","bodyWidth","groupExpansionDefault","rowId","rowIdentity","findIndex","onTreeAction","ChangeDetectorRef","ViewChild","DataTableHeaderComponent","sort","columnContextmenu","_columnGroupWidths","_styleByGroup","destroyed","_innerWidth","colByPin","setStylesByGroup","_headerHeight","_columnsByPin","_offsetX","onLongPressStart","dragEventTarget","onLongPressEnd","trackByGroups","colGroup","onColumnResized","prevValue","newValue","onColumnReordered","getColumn","targetMarkerContext","onTargetChanged","oldColumn","newColumn","leftColumnCount","centerColumnCount","onSort","sorts","calcNewSorts","map","dir","sortType","SortType","calcStylesByGroup","detectChanges","throttle","func","wait","options","context","previous","later","leading","Date","now","remaining","trailing","throttleable","key","descriptor","configurable","enumerable","getTotalFlexGrow","totalFlexGrow","flexGrow","adjustColumnWidths","allColumns","expectedWidth","columnsWidth","colsByGroup","attr","e_2","_d","hasMinWidth","remainingWidth","widthPerFlexPoint","_e","_f","scaleColumns","forceFillColumnWidths","startIdx","allowBleed","defaultColWidth","columnsToResize","filter","columnsToResize_1","columnsToResize_1_1","$$oldWidth","additionWidthPerColumn","exceedsWindow","contentWidth","getContentWidth","columnsProcessed","columnsToResize_2","e_5","columnsToResize_2_1","newSize","removeProcessedColumns","columnsProcessed_1","columnsProcessed_1_1","allColumns_1","allColumns_1_1","asc","desc","nextSortDir","SortDirection","orderByComparator","isFinite","sortRows","dirs","rowToIndexMap","comparator","cachedDirs","valueGetter","compareFn","rowA","rowB","cachedDirs_1","cachedDirs_1_1","cachedDir","propA","propB","comparison","DatatableComponent","scrollbarHelper","dimensionsHelper","configuration","columnMode","ColumnMode","headerHeight","footerHeight","externalSorting","reorderable","swapColumns","cssClasses","sortAscending","sortDescending","pagerLeftArrow","pagerRightArrow","pagerPrevious","pagerNext","messages","emptyMessage","totalMessage","selectedMessage","selectAllRowsOnPage","summaryRow","summaryHeight","summaryPosition","tableContextmenu","BehaviorSubject","_count","_subscriptions","_groupRowsBy","rowDiffer","_internalRows","sortInternalRows","treeFromRelation","treeToRelation","recalculate","groupArrayBy","_internalColumns","recalculateColumns","_limit","SelectionType","_columnTemplates","translateColumns","allRowsSelected","bodyComponent","rowsOnPage","count","limit","columnTemplates","v","listenForColumnInputChanges","originalArray","groupBy","ngDoCheck","recalculatePages","recalculateDims","onWindowResize","forceIdx","dims","calcPageSize","calcRowCount","onBodyPage","onFooterPage","size","onColumnContextmenu","ContextmenuType","content","onRowContextmenu","onColumnResize","onColumnReorder","prevCol","movedCol","onColumnSort","onHeaderSelect","allSelected","onBodySelect","columnInputChanges$","notifyOnChanges","encapsulation","ViewEncapsulation","None","decorators","SkipSelf","Optional","getOwnPropertyDescriptor","decorate","tslib_1.__decorate","DataTableHeaderCellComponent","sortFn","selectFn","cellContext","sortDir","_allRowsSelected","_column","_sorts","calcSortDir","sortClass","calcSortClass","cls","headerClass","res","keys","keys_1","keys_1_1","k","checkboxable","headerCheckboxable","onContextmenu","$event","sortAscendingIcon","sortDescendingIcon","DataTableFooterComponent","selectedCount","DataTablePagerComponent","change","_page","_size","pages","calcPages","canPrevious","canNext","totalPages","prevPage","selectPage","nextPage","startPage","endPage","isMaxSized","maxSize","num","number","text","ProgressBarComponent","up","down","return","escape","DataTableBodyRowComponent","_groupStyles","_element","_rowDiffer","buildStylesByGroup","isSelected","rowClass","onActivate","cellIndex","rowElement","onKeyDown","keyCode","isTargetRow","Keys","onMouseenter","DataTableRowWrapperComponent","groupContext","rowContext","_expanded","_rowIndex","getGroupHeaderStyle","DataTableBodyCellComponent","isFocused","onCheckboxChangeFn","onCheckboxChange","activateFn","_group","checkValueUpdates","_rowHeight","_isSelected","_row","_treeStatus","status","cellClass","userPipe","sanitizedValue","stripHtml","onFocus","onBlur","onClick","cellElement","onDblClick","isTargetCell","html","calcLeftMargin","levelIndent","treeLevelIndent","ViewContainerRef","selectRows","comparefn","selectedIndex","selectRowsBetween","reverse","range","start","end","DataTableSelectionComponent","selectRow","selectEnabled","chkbox","shiftKey","getRowSelectedIdx","ctrlKey","metaKey","selectCheck","onKeyboardFocus","isCellSelection","focusCell","focusRow","nextRowElement","getPrevNextRow","focus","focusElement","previousElementSibling","nextElementSibling","nextCellElement","getElementsByClassName","getRowSelected","defaultSumFunc","cells","cellsWithValues","some","noopSumFunc","DataTableSummaryRowComponent","updateInternalColumns","updateValues","cellsFromSingleColumn","sumFunc","getSummaryFunction","NgxDatatableModule","forRoot","ngModule","providers","provide","useValue","NgModule","imports","CommonModule","declarations","exports","elements","previousPointerEvents","elementFromPoint","getPropertyValue","priority","getPropertyPriority","setProperty","double"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n/**\r\n * Gets the width of the scrollbar.  Nesc for windows\r\n * http://stackoverflow.com/a/13382873/888165\r\n */\r\n@Injectable()\r\nexport class ScrollbarHelper {\r\n  width: number = this.getWidth();\r\n\r\n  constructor(@Inject(DOCUMENT) private document: any) {}\r\n\r\n  getWidth(): number {\r\n    const outer = this.document.createElement('div');\r\n    outer.style.visibility = 'hidden';\r\n    outer.style.width = '100px';\r\n    outer.style.msOverflowStyle = 'scrollbar';\r\n    this.document.body.appendChild(outer);\r\n\r\n    const widthNoScroll = outer.offsetWidth;\r\n    outer.style.overflow = 'scroll';\r\n\r\n    const inner = this.document.createElement('div');\r\n    inner.style.width = '100%';\r\n    outer.appendChild(inner);\r\n\r\n    const widthWithScroll = inner.offsetWidth;\r\n    outer.parentNode.removeChild(outer);\r\n\r\n    return widthNoScroll - widthWithScroll;\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\n\r\n/**\r\n * Gets the width of the scrollbar.  Nesc for windows\r\n * http://stackoverflow.com/a/13382873/888165\r\n */\r\n@Injectable()\r\nexport class DimensionsHelper {\r\n  getDimensions(element: Element): ClientRect {\r\n    return element.getBoundingClientRect();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\n/**\r\n * service to make DatatableComponent aware of changes to\r\n * input bindings of DataTableColumnDirective\r\n */\r\n@Injectable()\r\nexport class ColumnChangesService {\r\n  private columnInputChanges = new Subject<undefined>();\r\n\r\n  get columnInputChanges$(): Observable<undefined> {\r\n    return this.columnInputChanges.asObservable();\r\n  }\r\n\r\n  onInputChange(): void {\r\n    this.columnInputChanges.next();\r\n  }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-footer-template]' })\r\nexport class DataTableFooterTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, Output, EventEmitter, ElementRef, HostBinding, NgZone, OnInit, OnDestroy } from '@angular/core';\r\n\r\n/**\r\n * Visibility Observer Directive\r\n *\r\n * Usage:\r\n *\r\n * \t\t<div\r\n * \t\t\tvisibilityObserver\r\n * \t\t\t(visible)=\"onVisible($event)\">\r\n * \t\t</div>\r\n *\r\n */\r\n@Directive({ selector: '[visibilityObserver]' })\r\nexport class VisibilityDirective implements OnInit, OnDestroy {\r\n  @HostBinding('class.visible')\r\n  isVisible: boolean = false;\r\n\r\n  @Output() visible: EventEmitter<any> = new EventEmitter();\r\n\r\n  timeout: any;\r\n\r\n  constructor(private element: ElementRef, private zone: NgZone) {}\r\n\r\n  ngOnInit(): void {\r\n    this.runCheck();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    clearTimeout(this.timeout);\r\n  }\r\n\r\n  onVisibilityChange(): void {\r\n    // trigger zone recalc for columns\r\n    this.zone.run(() => {\r\n      this.isVisible = true;\r\n      this.visible.emit(true);\r\n    });\r\n  }\r\n\r\n  runCheck(): void {\r\n    const check = () => {\r\n      // https://davidwalsh.name/offsetheight-visibility\r\n      const { offsetHeight, offsetWidth } = this.element.nativeElement;\r\n\r\n      if (offsetHeight && offsetWidth) {\r\n        clearTimeout(this.timeout);\r\n        this.onVisibilityChange();\r\n      } else {\r\n        clearTimeout(this.timeout);\r\n        this.zone.runOutsideAngular(() => {\r\n          this.timeout = setTimeout(() => check(), 50);\r\n        });\r\n      }\r\n    };\r\n\r\n    this.timeout = setTimeout(() => check());\r\n  }\r\n}\r\n","import { Directive, ElementRef, Input, Output, EventEmitter, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { Observable, Subscription, fromEvent } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { MouseEvent } from '../events';\r\n\r\n/**\r\n * Draggable Directive for Angular2\r\n *\r\n * Inspiration:\r\n *   https://github.com/AngularClass/angular2-examples/blob/master/rx-draggable/directives/draggable.ts\r\n *   http://stackoverflow.com/questions/35662530/how-to-implement-drag-and-drop-in-angular2\r\n *\r\n */\r\n@Directive({ selector: '[draggable]' })\r\nexport class DraggableDirective implements OnDestroy, OnChanges {\r\n  @Input() dragEventTarget: any;\r\n  @Input() dragModel: any;\r\n  @Input() dragX: boolean = true;\r\n  @Input() dragY: boolean = true;\r\n\r\n  @Output() dragStart: EventEmitter<any> = new EventEmitter();\r\n  @Output() dragging: EventEmitter<any> = new EventEmitter();\r\n  @Output() dragEnd: EventEmitter<any> = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  isDragging: boolean = false;\r\n  subscription: Subscription;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['dragEventTarget'] && changes['dragEventTarget'].currentValue && this.dragModel.dragging) {\r\n      this.onMousedown(changes['dragEventTarget'].currentValue);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._destroySubscription();\r\n  }\r\n\r\n  onMouseup(event: MouseEvent): void {\r\n    if (!this.isDragging) return;\r\n\r\n    this.isDragging = false;\r\n    this.element.classList.remove('dragging');\r\n\r\n    if (this.subscription) {\r\n      this._destroySubscription();\r\n      this.dragEnd.emit({\r\n        event,\r\n        element: this.element,\r\n        model: this.dragModel\r\n      });\r\n    }\r\n  }\r\n\r\n  onMousedown(event: MouseEvent): void {\r\n    // we only want to drag the inner header text\r\n    const isDragElm = (<HTMLElement>event.target).classList.contains('draggable');\r\n\r\n    if (isDragElm && (this.dragX || this.dragY)) {\r\n      event.preventDefault();\r\n      this.isDragging = true;\r\n\r\n      const mouseDownPos = { x: event.clientX, y: event.clientY };\r\n\r\n      const mouseup = fromEvent(document, 'mouseup');\r\n      this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup(ev));\r\n\r\n      const mouseMoveSub = fromEvent(document, 'mousemove')\r\n        .pipe(takeUntil(mouseup))\r\n        .subscribe((ev: MouseEvent) => this.move(ev, mouseDownPos));\r\n\r\n      this.subscription.add(mouseMoveSub);\r\n\r\n      this.dragStart.emit({\r\n        event,\r\n        element: this.element,\r\n        model: this.dragModel\r\n      });\r\n    }\r\n  }\r\n\r\n  move(event: MouseEvent, mouseDownPos: { x: number; y: number }): void {\r\n    if (!this.isDragging) return;\r\n\r\n    const x = event.clientX - mouseDownPos.x;\r\n    const y = event.clientY - mouseDownPos.y;\r\n\r\n    if (this.dragX) this.element.style.left = `${x}px`;\r\n    if (this.dragY) this.element.style.top = `${y}px`;\r\n\r\n    this.element.classList.add('dragging');\r\n\r\n    this.dragging.emit({\r\n      event,\r\n      element: this.element,\r\n      model: this.dragModel\r\n    });\r\n  }\r\n\r\n  private _destroySubscription(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n      this.subscription = undefined;\r\n    }\r\n  }\r\n}\r\n","declare let global: any;\r\n\r\n/* tslint:disable */\r\nexport const MouseEvent = (((typeof window !== 'undefined' && window) as any) || (global as any))\r\n  .MouseEvent as MouseEvent;\r\nexport const KeyboardEvent = (((typeof window !== 'undefined' && window) as any) || (global as any))\r\n  .KeyboardEvent as KeyboardEvent;\r\nexport const Event = (((typeof window !== 'undefined' && window) as any) || (global as any)).Event as Event;\r\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  HostListener,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  AfterViewInit,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { Observable, Subscription, fromEvent } from 'rxjs';\r\nimport { MouseEvent } from '../events';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Directive({\r\n  selector: '[resizeable]',\r\n  host: {\r\n    '[class.resizeable]': 'resizeEnabled'\r\n  }\r\n})\r\nexport class ResizeableDirective implements OnDestroy, AfterViewInit {\r\n  @Input() resizeEnabled: boolean = true;\r\n  @Input() minWidth: number;\r\n  @Input() maxWidth: number;\r\n\r\n  @Output() resize: EventEmitter<any> = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  subscription: Subscription;\r\n  resizing: boolean = false;\r\n  private resizeHandle: HTMLElement;\r\n\r\n  constructor(element: ElementRef, private renderer: Renderer2) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    const renderer2 = this.renderer;\r\n    this.resizeHandle = renderer2.createElement('span');\r\n    if (this.resizeEnabled) {\r\n      renderer2.addClass(this.resizeHandle, 'resize-handle');\r\n    } else {\r\n      renderer2.addClass(this.resizeHandle, 'resize-handle--not-resizable');\r\n    }\r\n    renderer2.appendChild(this.element, this.resizeHandle);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._destroySubscription();\r\n    if (this.renderer.destroyNode) {\r\n      this.renderer.destroyNode(this.resizeHandle);\r\n    } else {\r\n      this.renderer.removeChild(this.renderer.parentNode(this.resizeHandle), this.resizeHandle);\r\n    }\r\n  }\r\n\r\n  onMouseup(): void {\r\n    this.resizing = false;\r\n\r\n    if (this.subscription && !this.subscription.closed) {\r\n      this._destroySubscription();\r\n      this.resize.emit(this.element.clientWidth);\r\n    }\r\n  }\r\n\r\n  @HostListener('mousedown', ['$event'])\r\n  onMousedown(event: MouseEvent): void {\r\n    const isHandle = (<HTMLElement>event.target).classList.contains('resize-handle');\r\n    const initialWidth = this.element.clientWidth;\r\n    const mouseDownScreenX = event.screenX;\r\n\r\n    if (isHandle) {\r\n      event.stopPropagation();\r\n      this.resizing = true;\r\n\r\n      const mouseup = fromEvent(document, 'mouseup');\r\n      this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup());\r\n\r\n      const mouseMoveSub = fromEvent(document, 'mousemove')\r\n        .pipe(takeUntil(mouseup))\r\n        .subscribe((e: MouseEvent) => this.move(e, initialWidth, mouseDownScreenX));\r\n\r\n      this.subscription.add(mouseMoveSub);\r\n    }\r\n  }\r\n\r\n  move(event: MouseEvent, initialWidth: number, mouseDownScreenX: number): void {\r\n    const movementX = event.screenX - mouseDownScreenX;\r\n    const newWidth = initialWidth + movementX;\r\n\r\n    const overMinWidth = !this.minWidth || newWidth >= this.minWidth;\r\n    const underMaxWidth = !this.maxWidth || newWidth <= this.maxWidth;\r\n\r\n    if (overMinWidth && underMaxWidth) {\r\n      this.element.style.width = `${newWidth}px`;\r\n    }\r\n  }\r\n\r\n  private _destroySubscription() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n      this.subscription = undefined;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Output,\r\n  EventEmitter,\r\n  ContentChildren,\r\n  QueryList,\r\n  KeyValueDiffers,\r\n  AfterContentInit,\r\n  OnDestroy,\r\n  Inject\r\n} from '@angular/core';\r\nimport { DraggableDirective } from './draggable.directive';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n@Directive({ selector: '[orderable]' })\r\nexport class OrderableDirective implements AfterContentInit, OnDestroy {\r\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\r\n  @Output() targetChanged: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChildren(DraggableDirective, { descendants: true })\r\n  draggables: QueryList<DraggableDirective>;\r\n\r\n  positions: any;\r\n  differ: any;\r\n  lastDraggingIndex: number;\r\n\r\n  constructor(differs: KeyValueDiffers, @Inject(DOCUMENT) private document: any) {\r\n    this.differ = differs.find({}).create();\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    // HACK: Investigate Better Way\r\n    this.updateSubscriptions();\r\n    this.draggables.changes.subscribe(this.updateSubscriptions.bind(this));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.draggables.forEach(d => {\r\n      d.dragStart.unsubscribe();\r\n      d.dragging.unsubscribe();\r\n      d.dragEnd.unsubscribe();\r\n    });\r\n  }\r\n\r\n  updateSubscriptions(): void {\r\n    const diffs = this.differ.diff(this.createMapDiffs());\r\n\r\n    if (diffs) {\r\n      const subscribe = ({ currentValue, previousValue }: any) => {\r\n        unsubscribe({ previousValue });\r\n\r\n        if (currentValue) {\r\n          currentValue.dragStart.subscribe(this.onDragStart.bind(this));\r\n          currentValue.dragging.subscribe(this.onDragging.bind(this));\r\n          currentValue.dragEnd.subscribe(this.onDragEnd.bind(this));\r\n        }\r\n      };\r\n\r\n      const unsubscribe = ({ previousValue }: any) => {\r\n        if (previousValue) {\r\n          previousValue.dragStart.unsubscribe();\r\n          previousValue.dragging.unsubscribe();\r\n          previousValue.dragEnd.unsubscribe();\r\n        }\r\n      };\r\n\r\n      diffs.forEachAddedItem(subscribe);\r\n      // diffs.forEachChangedItem(subscribe.bind(this));\r\n      diffs.forEachRemovedItem(unsubscribe);\r\n    }\r\n  }\r\n\r\n  onDragStart(): void {\r\n    this.positions = {};\r\n\r\n    let i = 0;\r\n    for (const dragger of this.draggables.toArray()) {\r\n      const elm = dragger.element;\r\n      const left = parseInt(elm.offsetLeft.toString(), 0);\r\n      this.positions[dragger.dragModel.prop] = {\r\n        left,\r\n        right: left + parseInt(elm.offsetWidth.toString(), 0),\r\n        index: i++,\r\n        element: elm\r\n      };\r\n    }\r\n  }\r\n\r\n  onDragging({ element, model, event }: any): void {\r\n    const prevPos = this.positions[model.prop];\r\n    const target = this.isTarget(model, event);\r\n\r\n    if (target) {\r\n      if (this.lastDraggingIndex !== target.i) {\r\n        this.targetChanged.emit({\r\n          prevIndex: this.lastDraggingIndex,\r\n          newIndex: target.i,\r\n          initialIndex: prevPos.index\r\n        });\r\n        this.lastDraggingIndex = target.i;\r\n      }\r\n    } else if (this.lastDraggingIndex !== prevPos.index) {\r\n      this.targetChanged.emit({\r\n        prevIndex: this.lastDraggingIndex,\r\n        initialIndex: prevPos.index\r\n      });\r\n      this.lastDraggingIndex = prevPos.index;\r\n    }\r\n  }\r\n\r\n  onDragEnd({ element, model, event }: any): void {\r\n    const prevPos = this.positions[model.prop];\r\n\r\n    const target = this.isTarget(model, event);\r\n    if (target) {\r\n      this.reorder.emit({\r\n        prevIndex: prevPos.index,\r\n        newIndex: target.i,\r\n        model\r\n      });\r\n    }\r\n\r\n    this.lastDraggingIndex = undefined;\r\n    element.style.left = 'auto';\r\n  }\r\n\r\n  isTarget(model: any, event: any): any {\r\n    let i = 0;\r\n    const x = event.x || event.clientX;\r\n    const y = event.y || event.clientY;\r\n    const targets = this.document.elementsFromPoint(x, y);\r\n\r\n    for (const prop in this.positions) {\r\n      // current column position which throws event.\r\n      const pos = this.positions[prop];\r\n\r\n      // since we drag the inner span, we need to find it in the elements at the cursor\r\n      if (model.prop !== prop && targets.find((el: any) => el === pos.element)) {\r\n        return {\r\n          pos,\r\n          i\r\n        };\r\n      }\r\n\r\n      i++;\r\n    }\r\n  }\r\n\r\n  private createMapDiffs(): { [key: string]: DraggableDirective } {\r\n    return this.draggables.toArray().reduce((acc, curr) => {\r\n      acc[curr.dragModel.$$id] = curr;\r\n      return acc;\r\n    }, {});\r\n  }\r\n}\r\n","import { Directive, Input, Output, EventEmitter, HostBinding, HostListener, OnDestroy } from '@angular/core';\r\nimport { Observable, Subscription, fromEvent } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { MouseEvent } from '../events';\r\n\r\n@Directive({ selector: '[long-press]' })\r\nexport class LongPressDirective implements OnDestroy {\r\n  @Input() pressEnabled: boolean = true;\r\n  @Input() pressModel: any;\r\n  @Input() duration: number = 500;\r\n\r\n  @Output() longPressStart: EventEmitter<any> = new EventEmitter();\r\n  @Output() longPressing: EventEmitter<any> = new EventEmitter();\r\n  @Output() longPressEnd: EventEmitter<any> = new EventEmitter();\r\n\r\n  pressing: boolean;\r\n  isLongPressing: boolean;\r\n  timeout: any;\r\n  mouseX: number = 0;\r\n  mouseY: number = 0;\r\n\r\n  subscription: Subscription;\r\n\r\n  @HostBinding('class.press')\r\n  get press(): boolean {\r\n    return this.pressing;\r\n  }\r\n\r\n  @HostBinding('class.longpress')\r\n  get isLongPress(): boolean {\r\n    return this.isLongPressing;\r\n  }\r\n\r\n  @HostListener('mousedown', ['$event'])\r\n  onMouseDown(event: MouseEvent): void {\r\n    // don't do right/middle clicks\r\n    if (event.which !== 1 || !this.pressEnabled) return;\r\n\r\n    // don't start drag if its on resize handle\r\n    const target = <HTMLElement>event.target;\r\n    if (target.classList.contains('resize-handle')) return;\r\n\r\n    this.mouseX = event.clientX;\r\n    this.mouseY = event.clientY;\r\n\r\n    this.pressing = true;\r\n    this.isLongPressing = false;\r\n\r\n    const mouseup = fromEvent(document, 'mouseup');\r\n    this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup());\r\n\r\n    this.timeout = setTimeout(() => {\r\n      this.isLongPressing = true;\r\n      this.longPressStart.emit({\r\n        event,\r\n        model: this.pressModel\r\n      });\r\n\r\n      this.subscription.add(\r\n        fromEvent(document, 'mousemove')\r\n          .pipe(takeUntil(mouseup))\r\n          .subscribe((mouseEvent: MouseEvent) => this.onMouseMove(mouseEvent))\r\n      );\r\n\r\n      this.loop(event);\r\n    }, this.duration);\r\n\r\n    this.loop(event);\r\n  }\r\n\r\n  onMouseMove(event: MouseEvent): void {\r\n    if (this.pressing && !this.isLongPressing) {\r\n      const xThres = Math.abs(event.clientX - this.mouseX) > 10;\r\n      const yThres = Math.abs(event.clientY - this.mouseY) > 10;\r\n\r\n      if (xThres || yThres) {\r\n        this.endPress();\r\n      }\r\n    }\r\n  }\r\n\r\n  loop(event: MouseEvent): void {\r\n    if (this.isLongPressing) {\r\n      this.timeout = setTimeout(() => {\r\n        this.longPressing.emit({\r\n          event,\r\n          model: this.pressModel\r\n        });\r\n        this.loop(event);\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n  endPress(): void {\r\n    clearTimeout(this.timeout);\r\n    this.isLongPressing = false;\r\n    this.pressing = false;\r\n    this._destroySubscription();\r\n\r\n    this.longPressEnd.emit({\r\n      model: this.pressModel\r\n    });\r\n  }\r\n\r\n  onMouseup(): void {\r\n    this.endPress();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._destroySubscription();\r\n  }\r\n\r\n  private _destroySubscription(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n      this.subscription = undefined;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ElementRef,\r\n  Output,\r\n  EventEmitter,\r\n  Renderer2,\r\n  NgZone,\r\n  OnInit,\r\n  OnDestroy,\r\n  HostBinding,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { MouseEvent } from '../../events';\r\n\r\n@Component({\r\n  selector: 'datatable-scroller',\r\n  template: `\r\n    <ng-content></ng-content>\r\n  `,\r\n  host: {\r\n    class: 'datatable-scroll'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ScrollerComponent implements OnInit, OnDestroy {\r\n  @Input() scrollbarV: boolean = false;\r\n  @Input() scrollbarH: boolean = false;\r\n\r\n  @HostBinding('style.height.px')\r\n  @Input()\r\n  scrollHeight: number;\r\n\r\n  @HostBinding('style.width.px')\r\n  @Input()\r\n  scrollWidth: number;\r\n\r\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\r\n\r\n  scrollYPos: number = 0;\r\n  scrollXPos: number = 0;\r\n  prevScrollYPos: number = 0;\r\n  prevScrollXPos: number = 0;\r\n  element: any;\r\n  parentElement: any;\r\n  onScrollListener: any;\r\n\r\n  private _scrollEventListener: any = null;\r\n\r\n  constructor(private ngZone: NgZone, element: ElementRef, private renderer: Renderer2) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // manual bind so we don't always listen\r\n    if (this.scrollbarV || this.scrollbarH) {\r\n      const renderer = this.renderer;\r\n      this.parentElement = renderer.parentNode(renderer.parentNode(this.element));\r\n      this._scrollEventListener = this.onScrolled.bind(this);\r\n      this.parentElement.addEventListener('scroll', this._scrollEventListener);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this._scrollEventListener) {\r\n      this.parentElement.removeEventListener('scroll', this._scrollEventListener);\r\n      this._scrollEventListener = null;\r\n    }\r\n  }\r\n\r\n  setOffset(offsetY: number): void {\r\n    if (this.parentElement) {\r\n      this.parentElement.scrollTop = offsetY;\r\n    }\r\n  }\r\n\r\n  onScrolled(event: MouseEvent): void {\r\n    const dom: Element = <Element>event.currentTarget;\r\n    requestAnimationFrame(() => {\r\n      this.scrollYPos = dom.scrollTop;\r\n      this.scrollXPos = dom.scrollLeft;\r\n      this.updateOffset();\r\n    });\r\n  }\r\n\r\n  updateOffset(): void {\r\n    let direction: string;\r\n    if (this.scrollYPos < this.prevScrollYPos) {\r\n      direction = 'down';\r\n    } else if (this.scrollYPos > this.prevScrollYPos) {\r\n      direction = 'up';\r\n    }\r\n\r\n    this.scroll.emit({\r\n      direction,\r\n      scrollYPos: this.scrollYPos,\r\n      scrollXPos: this.scrollXPos\r\n    });\r\n\r\n    this.prevScrollYPos = this.scrollYPos;\r\n    this.prevScrollXPos = this.scrollXPos;\r\n  }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[ngx-datatable-group-header-template]'\r\n})\r\nexport class DatatableGroupHeaderTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Input, Output, EventEmitter, Directive, TemplateRef, ContentChild } from '@angular/core';\r\nimport { DatatableGroupHeaderTemplateDirective } from './body-group-header-template.directive';\r\n\r\n@Directive({ selector: 'ngx-datatable-group-header' })\r\nexport class DatatableGroupHeaderDirective {\r\n  /**\r\n   * Row height is required when virtual scroll is enabled.\r\n   */\r\n  @Input() rowHeight: number | ((group?: any, index?: number) => number) = 0;\r\n\r\n  @Input('template')\r\n  _templateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DatatableGroupHeaderTemplateDirective, { read: TemplateRef, static: true })\r\n  _templateQuery: TemplateRef<any>;\r\n\r\n  get template(): TemplateRef<any> {\r\n    return this._templateInput || this._templateQuery;\r\n  }\r\n\r\n  /**\r\n   * Track toggling of group visibility\r\n   */\r\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Toggle the expansion of a group\r\n   */\r\n  toggleExpandGroup(group: any): void {\r\n    this.toggle.emit({\r\n      type: 'group',\r\n      value: group\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Expand all groups\r\n   */\r\n  expandAllGroups(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Collapse all groups\r\n   */\r\n  collapseAllGroups(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: false\r\n    });\r\n  }\r\n}\r\n","import { TableColumnProp } from '../types/table-column.type';\r\n\r\n// maybe rename this file to prop-getters.ts\r\n\r\nexport type ValueGetter = (obj: any, prop: TableColumnProp) => any;\r\n\r\n/**\r\n * Always returns the empty string ''\r\n */\r\nexport function emptyStringGetter(): string {\r\n  return '';\r\n}\r\n\r\n/**\r\n * Returns the appropriate getter function for this kind of prop.\r\n * If prop == null, returns the emptyStringGetter.\r\n */\r\nexport function getterForProp(prop: TableColumnProp): ValueGetter {\r\n  if (prop == null) {\r\n    return emptyStringGetter;\r\n  }\r\n\r\n  if (typeof prop === 'number') {\r\n    return numericIndexGetter;\r\n  } else {\r\n    // deep or simple\r\n    if (prop.indexOf('.') !== -1) {\r\n      return deepValueGetter;\r\n    } else {\r\n      return shallowValueGetter;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the value at this numeric index.\r\n * @param row array of values\r\n * @param index numeric index\r\n * @returns any or '' if invalid index\r\n */\r\nexport function numericIndexGetter(row: any[], index: number): any {\r\n  if (row == null) {\r\n    return '';\r\n  }\r\n  // mimic behavior of deepValueGetter\r\n  if (!row || index == null) {\r\n    return row;\r\n  }\r\n\r\n  const value = row[index];\r\n  if (value == null) {\r\n    return '';\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * Returns the value of a field.\r\n * (more efficient than deepValueGetter)\r\n * @param obj object containing the field\r\n * @param fieldName field name string\r\n */\r\nexport function shallowValueGetter(obj: any, fieldName: string): any {\r\n  if (obj == null) {\r\n    return '';\r\n  }\r\n  if (!obj || !fieldName) {\r\n    return obj;\r\n  }\r\n\r\n  const value = obj[fieldName];\r\n  if (value == null) {\r\n    return '';\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * Returns a deep object given a string. zoo['animal.type']\r\n */\r\nexport function deepValueGetter(obj: any, path: string): any {\r\n  if (obj == null) {\r\n    return '';\r\n  }\r\n  if (!obj || !path) {\r\n    return obj;\r\n  }\r\n\r\n  // check if path matches a root-level field\r\n  // { \"a.b.c\": 123 }\r\n  let current = obj[path];\r\n  if (current !== undefined) {\r\n    return current;\r\n  }\r\n\r\n  current = obj;\r\n  const split = path.split('.');\r\n\r\n  if (split.length) {\r\n    for (let i = 0; i < split.length; i++) {\r\n      current = current[split[i]];\r\n\r\n      // if found undefined, return empty string\r\n      if (current === undefined || current === null) {\r\n        return '';\r\n      }\r\n    }\r\n  }\r\n\r\n  return current;\r\n}\r\n","import { getterForProp } from './column-prop-getters';\r\nimport { TableColumnProp } from '../types/table-column.type';\r\n\r\nexport type OptionalValueGetter = (row: any) => any | undefined;\r\nexport function optionalGetterForProp(prop: TableColumnProp): OptionalValueGetter {\r\n  return prop && (row => getterForProp(prop)(row, prop));\r\n}\r\n\r\n/**\r\n * This functions rearrange items by their parents\r\n * Also sets the level value to each of the items\r\n *\r\n * Note: Expecting each item has a property called parentId\r\n * Note: This algorithm will fail if a list has two or more items with same ID\r\n * NOTE: This algorithm will fail if there is a deadlock of relationship\r\n *\r\n * For example,\r\n *\r\n * Input\r\n *\r\n * id -> parent\r\n * 1  -> 0\r\n * 2  -> 0\r\n * 3  -> 1\r\n * 4  -> 1\r\n * 5  -> 2\r\n * 7  -> 8\r\n * 6  -> 3\r\n *\r\n *\r\n * Output\r\n * id -> level\r\n * 1      -> 0\r\n * --3    -> 1\r\n * ----6  -> 2\r\n * --4    -> 1\r\n * 2      -> 0\r\n * --5    -> 1\r\n * 7     -> 8\r\n *\r\n *\r\n * @param rows\r\n *\r\n */\r\nexport function groupRowsByParents(rows: any[], from?: OptionalValueGetter, to?: OptionalValueGetter): any[] {\r\n  if (from && to) {\r\n    const nodeById = {};\r\n    const l = rows.length;\r\n    let node: TreeNode | null = null;\r\n\r\n    nodeById[0] = new TreeNode(); // that's the root node\r\n\r\n    const uniqIDs = rows.reduce((arr, item) => {\r\n      const toValue = to(item);\r\n      if (arr.indexOf(toValue) === -1) {\r\n        arr.push(toValue);\r\n      }\r\n      return arr;\r\n    }, []);\r\n\r\n    for (let i = 0; i < l; i++) {\r\n      // make TreeNode objects for each item\r\n      nodeById[to(rows[i])] = new TreeNode(rows[i]);\r\n    }\r\n\r\n    for (let i = 0; i < l; i++) {\r\n      // link all TreeNode objects\r\n      node = nodeById[to(rows[i])];\r\n      let parent = 0;\r\n      const fromValue = from(node.row);\r\n      if (!!fromValue && uniqIDs.indexOf(fromValue) > -1) {\r\n        parent = fromValue;\r\n      }\r\n      node.parent = nodeById[parent];\r\n      node.row['level'] = node.parent.row['level'] + 1;\r\n      node.parent.children.push(node);\r\n    }\r\n\r\n    let resolvedRows: any[] = [];\r\n    nodeById[0].flatten(function() {\r\n      resolvedRows = [...resolvedRows, this.row];\r\n    }, true);\r\n\r\n    return resolvedRows;\r\n  } else {\r\n    return rows;\r\n  }\r\n}\r\n\r\nclass TreeNode {\r\n  public row: any;\r\n  public parent: any;\r\n  public children: any[];\r\n\r\n  constructor(row: any | null = null) {\r\n    if (!row) {\r\n      row = {\r\n        level: -1,\r\n        treeStatus: 'expanded'\r\n      };\r\n    }\r\n    this.row = row;\r\n    this.parent = null;\r\n    this.children = [];\r\n  }\r\n\r\n  flatten(f: any, recursive: boolean) {\r\n    if (this.row['treeStatus'] === 'expanded') {\r\n      for (let i = 0, l = this.children.length; i < l; i++) {\r\n        const child = this.children[i];\r\n        f.apply(child, Array.prototype.slice.call(arguments, 2));\r\n        if (recursive) child.flatten.apply(child, arguments);\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Converts strings from something to camel case\r\n * http://stackoverflow.com/questions/10425287/convert-dash-separated-string-to-camelcase\r\n */\r\nexport function camelCase(str: string): string {\r\n  // Replace special characters with a space\r\n  str = str.replace(/[^a-zA-Z0-9 ]/g, ' ');\r\n  // put a space before an uppercase letter\r\n  str = str.replace(/([a-z](?=[A-Z]))/g, '$1 ');\r\n\r\n  // Lower case first character and some other stuff\r\n  str = str\r\n    .replace(/([^a-zA-Z0-9 ])|^[0-9]+/g, '')\r\n    .trim()\r\n    .toLowerCase();\r\n\r\n  // uppercase characters preceded by a space or number\r\n  str = str.replace(/([ 0-9]+)([a-zA-Z])/g, function(a, b, c) {\r\n    return b.trim() + c.toUpperCase();\r\n  });\r\n\r\n  return str;\r\n}\r\n\r\n/**\r\n * Converts strings from camel case to words\r\n * http://stackoverflow.com/questions/7225407/convert-camelcasetext-to-camel-case-text\r\n */\r\nexport function deCamelCase(str: string): string {\r\n  return str.replace(/([A-Z])/g, match => ` ${match}`).replace(/^./, match => match.toUpperCase());\r\n}\r\n","/**\r\n * Creates a unique object id.\r\n * http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\r\n */\r\nexport function id() {\r\n  return ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\r\n}\r\n","import { camelCase, deCamelCase } from './camel-case';\r\nimport { id } from './id';\r\nimport { getterForProp } from './column-prop-getters';\r\nimport { TableColumn } from '../types/table-column.type';\r\nimport { DataTableColumnDirective } from '../components/columns/column.directive';\r\n\r\n/**\r\n * Sets the column defaults\r\n */\r\nexport function setColumnDefaults(columns: TableColumn[]) {\r\n  if (!columns) return;\r\n\r\n  // Only one column should hold the tree view\r\n  // Thus if multiple columns are provided with\r\n  // isTreeColumn as true we take only the first one\r\n  let treeColumnFound: boolean = false;\r\n\r\n  for (const column of columns) {\r\n    if (!column.$$id) {\r\n      column.$$id = id();\r\n    }\r\n\r\n    // prop can be numeric; zero is valid not a missing prop\r\n    // translate name => prop\r\n    if (isNullOrUndefined(column.prop) && column.name) {\r\n      column.prop = camelCase(column.name);\r\n    }\r\n\r\n    if (!column.$$valueGetter) {\r\n      column.$$valueGetter = getterForProp(column.prop);\r\n    }\r\n\r\n    // format props if no name passed\r\n    if (!isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\r\n      column.name = deCamelCase(String(column.prop));\r\n    }\r\n\r\n    if (isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\r\n      column.name = ''; // Fixes IE and Edge displaying `null`\r\n    }\r\n\r\n    if (!column.hasOwnProperty('resizeable')) {\r\n      column.resizeable = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('sortable')) {\r\n      column.sortable = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('draggable')) {\r\n      column.draggable = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('canAutoResize')) {\r\n      column.canAutoResize = true;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('width')) {\r\n      column.width = 150;\r\n    }\r\n\r\n    if (!column.hasOwnProperty('isTreeColumn')) {\r\n      column.isTreeColumn = false;\r\n    } else {\r\n      if (column.isTreeColumn && !treeColumnFound) {\r\n        // If the first column with isTreeColumn is true found\r\n        // we mark that treeCoulmn is found\r\n        treeColumnFound = true;\r\n      } else {\r\n        // After that isTreeColumn property for any other column\r\n        // will be set as false\r\n        column.isTreeColumn = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function isNullOrUndefined<T>(value: T | null | undefined): value is null | undefined {\r\n  return value === null || value === undefined;\r\n}\r\n\r\n/**\r\n * Translates templates definitions to objects\r\n */\r\nexport function translateTemplates(templates: DataTableColumnDirective[]): any[] {\r\n  const result: any[] = [];\r\n  for (const temp of templates) {\r\n    const col: any = {};\r\n\r\n    const props = Object.getOwnPropertyNames(temp);\r\n    for (const prop of props) {\r\n      col[prop] = temp[prop];\r\n    }\r\n\r\n    if (temp.headerTemplate) {\r\n      col.headerTemplate = temp.headerTemplate;\r\n    }\r\n\r\n    if (temp.cellTemplate) {\r\n      col.cellTemplate = temp.cellTemplate;\r\n    }\r\n\r\n    if (temp.summaryFunc) {\r\n      col.summaryFunc = temp.summaryFunc;\r\n    }\r\n\r\n    if (temp.summaryTemplate) {\r\n      col.summaryTemplate = temp.summaryTemplate;\r\n    }\r\n\r\n    result.push(col);\r\n  }\r\n\r\n  return result;\r\n}\r\n","export enum ColumnMode {\r\n  standard = 'standard',\r\n  flex = 'flex',\r\n  force = 'force'\r\n}\r\n","export enum SelectionType {\r\n  single = 'single',\r\n  multi = 'multi',\r\n  multiClick = 'multiClick',\r\n  cell = 'cell',\r\n  checkbox = 'checkbox'\r\n}\r\n","export enum SortType {\r\n  single = 'single',\r\n  multi = 'multi'\r\n}\r\n","export enum ContextmenuType {\r\n  header = 'header',\r\n  body = 'body'\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-header-template]' })\r\nexport class DataTableColumnHeaderDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-cell-template]' })\r\nexport class DataTableColumnCellDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[ngx-datatable-tree-toggle]' })\r\nexport class DataTableColumnCellTreeToggle {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef, ContentChild, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { DataTableColumnHeaderDirective } from './column-header.directive';\r\nimport { DataTableColumnCellDirective } from './column-cell.directive';\r\nimport { DataTableColumnCellTreeToggle } from './tree.directive';\r\nimport { ColumnChangesService } from '../../services/column-changes.service';\r\nimport { TableColumnProp } from '../../types/table-column.type';\r\n\r\n@Directive({ selector: 'ngx-datatable-column' })\r\nexport class DataTableColumnDirective implements OnChanges {\r\n  @Input() name: string;\r\n  @Input() prop: TableColumnProp;\r\n  @Input() frozenLeft: any;\r\n  @Input() frozenRight: any;\r\n  @Input() flexGrow: number;\r\n  @Input() resizeable: boolean;\r\n  @Input() comparator: any;\r\n  @Input() pipe: any;\r\n  @Input() sortable: boolean;\r\n  @Input() draggable: boolean;\r\n  @Input() canAutoResize: boolean;\r\n  @Input() minWidth: number;\r\n  @Input() width: number;\r\n  @Input() maxWidth: number;\r\n  @Input() checkboxable: boolean;\r\n  @Input() headerCheckboxable: boolean;\r\n  @Input() headerClass: string | ((data: any) => string | any);\r\n  @Input() cellClass: string | ((data: any) => string | any);\r\n  @Input() isTreeColumn: boolean;\r\n  @Input() treeLevelIndent: number;\r\n  @Input() summaryFunc: (cells: any[]) => any;\r\n  @Input() summaryTemplate: TemplateRef<any>;\r\n\r\n  @Input('cellTemplate')\r\n  _cellTemplateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableColumnCellDirective, { read: TemplateRef, static: true })\r\n  _cellTemplateQuery: TemplateRef<any>;\r\n\r\n  get cellTemplate(): TemplateRef<any> {\r\n    return this._cellTemplateInput || this._cellTemplateQuery;\r\n  }\r\n\r\n  @Input('headerTemplate')\r\n  _headerTemplateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableColumnHeaderDirective, { read: TemplateRef, static: true })\r\n  _headerTemplateQuery: TemplateRef<any>;\r\n\r\n  get headerTemplate(): TemplateRef<any> {\r\n    return this._headerTemplateInput || this._headerTemplateQuery;\r\n  }\r\n\r\n  @Input('treeToggleTemplate')\r\n  _treeToggleTemplateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableColumnCellTreeToggle, { read: TemplateRef, static: true })\r\n  _treeToggleTemplateQuery: TemplateRef<any>;\r\n\r\n  get treeToggleTemplate(): TemplateRef<any> {\r\n    return this._treeToggleTemplateInput || this._treeToggleTemplateQuery;\r\n  }\r\n\r\n  private isFirstChange = true;\r\n\r\n  constructor(private columnChangesService: ColumnChangesService) {}\r\n\r\n  ngOnChanges() {\r\n    if (this.isFirstChange) {\r\n      this.isFirstChange = false;\r\n    } else {\r\n      this.columnChangesService.onInputChange();\r\n    }\r\n  }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[ngx-datatable-row-detail-template]'\r\n})\r\nexport class DatatableRowDetailTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n","import { Input, Output, EventEmitter, Directive, TemplateRef, ContentChild } from '@angular/core';\r\nimport { DatatableRowDetailTemplateDirective } from './row-detail-template.directive';\r\n\r\n@Directive({ selector: 'ngx-datatable-row-detail' })\r\nexport class DatatableRowDetailDirective {\r\n  /**\r\n   * The detail row height is required especially\r\n   * when virtual scroll is enabled.\r\n   */\r\n  @Input() rowHeight: number | ((row?: any, index?: number) => number) = 0;\r\n\r\n  @Input('template')\r\n  _templateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DatatableRowDetailTemplateDirective, { read: TemplateRef, static: true })\r\n  _templateQuery: TemplateRef<any>;\r\n\r\n  get template(): TemplateRef<any> {\r\n    return this._templateInput || this._templateQuery;\r\n  }\r\n\r\n  /**\r\n   * Row detail row visbility was toggled.\r\n   */\r\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  /**\r\n   * Toggle the expansion of the row\r\n   */\r\n  toggleExpandRow(row: any): void {\r\n    this.toggle.emit({\r\n      type: 'row',\r\n      value: row\r\n    });\r\n  }\r\n\r\n  /**\r\n   * API method to expand all the rows.\r\n   */\r\n  expandAllRows(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * API method to collapse all the rows.\r\n   */\r\n  collapseAllRows(): void {\r\n    this.toggle.emit({\r\n      type: 'all',\r\n      value: false\r\n    });\r\n  }\r\n}\r\n","import { Input, Output, EventEmitter, Directive, TemplateRef, ContentChild } from '@angular/core';\r\nimport { DataTableFooterTemplateDirective } from './footer-template.directive';\r\n\r\n@Directive({ selector: 'ngx-datatable-footer' })\r\nexport class DatatableFooterDirective {\r\n  @Input() footerHeight: number;\r\n  @Input() totalMessage: string;\r\n  @Input() selectedMessage: string | boolean;\r\n  @Input() pagerLeftArrowIcon: string;\r\n  @Input() pagerRightArrowIcon: string;\r\n  @Input() pagerPreviousIcon: string;\r\n  @Input() pagerNextIcon: string;\r\n\r\n  @Input('template')\r\n  _templateInput: TemplateRef<any>;\r\n\r\n  @ContentChild(DataTableFooterTemplateDirective, { read: TemplateRef, static: false })\r\n  _templateQuery: TemplateRef<any>;\r\n\r\n  get template(): TemplateRef<any> {\r\n    return this._templateInput || this._templateQuery;\r\n  }\r\n}\r\n","/**\r\n * Returns the columns by pin.\r\n */\r\nexport function columnsByPin(cols: any[]) {\r\n  const ret: { left: any; center: any; right: any } = {\r\n    left: [],\r\n    center: [],\r\n    right: []\r\n  };\r\n\r\n  if (cols) {\r\n    for (const col of cols) {\r\n      if (col.frozenLeft) {\r\n        ret.left.push(col);\r\n      } else if (col.frozenRight) {\r\n        ret.right.push(col);\r\n      } else {\r\n        ret.center.push(col);\r\n      }\r\n    }\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Returns the widths of all group sets of a column\r\n */\r\nexport function columnGroupWidths(groups: any, all: any) {\r\n  return {\r\n    left: columnTotalWidth(groups.left),\r\n    center: columnTotalWidth(groups.center),\r\n    right: columnTotalWidth(groups.right),\r\n    total: Math.floor(columnTotalWidth(all))\r\n  };\r\n}\r\n\r\n/**\r\n * Calculates the total width of all columns and their groups\r\n */\r\nexport function columnTotalWidth(columns: any[], prop?: string) {\r\n  let totalWidth = 0;\r\n\r\n  if (columns) {\r\n    for (const c of columns) {\r\n      const has = prop && c[prop];\r\n      const width = has ? c[prop] : c.width;\r\n      totalWidth = totalWidth + parseFloat(width);\r\n    }\r\n  }\r\n\r\n  return totalWidth;\r\n}\r\n\r\n/**\r\n * Calculates the total width of all columns and their groups\r\n */\r\nexport function columnsTotalWidth(columns: any, prop?: any) {\r\n  let totalWidth = 0;\r\n\r\n  for (const column of columns) {\r\n    const has = prop && column[prop];\r\n    totalWidth = totalWidth + (has ? column[prop] : column.width);\r\n  }\r\n\r\n  return totalWidth;\r\n}\r\n\r\nexport function columnsByPinArr(val: any) {\r\n  const colsByPinArr = [];\r\n  const colsByPin = columnsByPin(val);\r\n\r\n  colsByPinArr.push({ type: 'left', columns: colsByPin['left'] });\r\n  colsByPinArr.push({ type: 'center', columns: colsByPin['center'] });\r\n  colsByPinArr.push({ type: 'right', columns: colsByPin['right'] });\r\n\r\n  return colsByPinArr;\r\n}\r\n","/**\n * This object contains the cache of the various row heights that are present inside\n * the data table.   Its based on Fenwick tree data structure that helps with\n * querying sums that have time complexity of log n.\n *\n * Fenwick Tree Credits: http://petr-mitrichev.blogspot.com/2013/05/fenwick-tree-range-updates.html\n * https://github.com/mikolalysenko/fenwick-tree\n *\n */\nexport class RowHeightCache {\n  /**\n   * Tree Array stores the cumulative information of the row heights to perform efficient\n   * range queries and updates.  Currently the tree is initialized to the base row\n   * height instead of the detail row height.\n   */\n  private treeArray: number[] = [];\n\n  /**\n   * Clear the Tree array.\n   */\n  clearCache(): void {\n    this.treeArray = [];\n  }\n\n  /**\n   * Initialize the Fenwick tree with row Heights.\n   *\n   * @param rows The array of rows which contain the expanded status.\n   * @param rowHeight The row height.\n   * @param detailRowHeight The detail row height.\n   */\n  initCache(details: any): void {\n    const { rows, rowHeight, detailRowHeight, externalVirtual, rowCount, rowIndexes, rowExpansions } = details;\n    const isFn = typeof rowHeight === 'function';\n    const isDetailFn = typeof detailRowHeight === 'function';\n\n    if (!isFn && isNaN(rowHeight)) {\n      throw new Error(`Row Height cache initialization failed. Please ensure that 'rowHeight' is a\n        valid number or function value: (${rowHeight}) when 'scrollbarV' is enabled.`);\n    }\n\n    // Add this additional guard in case detailRowHeight is set to 'auto' as it wont work.\n    if (!isDetailFn && isNaN(detailRowHeight)) {\n      throw new Error(`Row Height cache initialization failed. Please ensure that 'detailRowHeight' is a\n        valid number or function value: (${detailRowHeight}) when 'scrollbarV' is enabled.`);\n    }\n\n    const n = externalVirtual ? rowCount : rows.length;\n    this.treeArray = new Array(n);\n\n    for (let i = 0; i < n; ++i) {\n      this.treeArray[i] = 0;\n    }\n\n    for (let i = 0; i < n; ++i) {\n      const row = rows[i];\n      let currentRowHeight = rowHeight;\n      if (isFn) {\n        currentRowHeight = rowHeight(row);\n      }\n\n      // Add the detail row height to the already expanded rows.\n      // This is useful for the table that goes through a filter or sort.\n      const expanded = rowExpansions.has(row);\n      if (row && expanded) {\n        if (isDetailFn) {\n          const index = rowIndexes.get(row);\n          currentRowHeight += detailRowHeight(row, index);\n        } else {\n          currentRowHeight += detailRowHeight;\n        }\n      }\n\n      this.update(i, currentRowHeight);\n    }\n  }\n\n  /**\n   * Given the ScrollY position i.e. sum, provide the rowIndex\n   * that is present in the current view port.  Below handles edge cases.\n   */\n  getRowIndex(scrollY: number): number {\n    if (scrollY === 0) return 0;\n    return this.calcRowIndex(scrollY);\n  }\n\n  /**\n   * When a row is expanded or rowHeight is changed, update the height.  This can\n   * be utilized in future when Angular Data table supports dynamic row heights.\n   */\n  update(atRowIndex: number, byRowHeight: number): void {\n    if (!this.treeArray.length) {\n      throw new Error(`Update at index ${atRowIndex} with value ${byRowHeight} failed:\n        Row Height cache not initialized.`);\n    }\n\n    const n = this.treeArray.length;\n    atRowIndex |= 0;\n\n    while (atRowIndex < n) {\n      this.treeArray[atRowIndex] += byRowHeight;\n      atRowIndex |= atRowIndex + 1;\n    }\n  }\n\n  /**\n   * Range Sum query from 1 to the rowIndex\n   */\n  query(atIndex: number): number {\n    if (!this.treeArray.length) {\n      throw new Error(`query at index ${atIndex} failed: Fenwick tree array not initialized.`);\n    }\n\n    let sum = 0;\n    atIndex |= 0;\n\n    while (atIndex >= 0) {\n      sum += this.treeArray[atIndex];\n      atIndex = (atIndex & (atIndex + 1)) - 1;\n    }\n\n    return sum;\n  }\n\n  /**\n   * Find the total height between 2 row indexes\n   */\n  queryBetween(atIndexA: number, atIndexB: number): number {\n    return this.query(atIndexB) - this.query(atIndexA - 1);\n  }\n\n  /**\n   * Given the ScrollY position i.e. sum, provide the rowIndex\n   * that is present in the current view port.\n   */\n  private calcRowIndex(sum: number): number {\n    if (!this.treeArray.length) return 0;\n\n    let pos = -1;\n    const dataLength = this.treeArray.length;\n\n    // Get the highest bit for the block size.\n    const highestBit = Math.pow(2, dataLength.toString(2).length - 1);\n\n    for (let blockSize = highestBit; blockSize !== 0; blockSize >>= 1) {\n      const nextPos = pos + blockSize;\n      if (nextPos < dataLength && sum >= this.treeArray[nextPos]) {\n        sum -= this.treeArray[nextPos];\n        pos = nextPos;\n      }\n    }\n\n    return pos + 1;\n  }\n}\n","import { camelCase } from './camel-case';\r\n\r\nconst cache = {};\r\nconst testStyle = typeof document !== 'undefined' ? document.createElement('div').style : undefined;\r\n\r\n// Get Prefix\r\n// http://davidwalsh.name/vendor-prefix\r\nconst prefix = (function() {\r\n  const styles = typeof window !== 'undefined' ? window.getComputedStyle(document.documentElement, '') : undefined;\r\n  const match =\r\n    typeof styles !== 'undefined'\r\n      ? Array.prototype.slice\r\n          .call(styles)\r\n          .join('')\r\n          .match(/-(moz|webkit|ms)-/)\r\n      : null;\r\n  const pre = match !== null ? match[1] : undefined;\r\n  // tslint:disable-next-line: tsr-detect-non-literal-regexp\r\n  const dom = typeof pre !== 'undefined' ? 'WebKit|Moz|MS|O'.match(new RegExp('(' + pre + ')', 'i'))[1] : undefined;\r\n\r\n  return dom\r\n    ? {\r\n        dom,\r\n        lowercase: pre,\r\n        css: `-${pre}-`,\r\n        js: pre[0].toUpperCase() + pre.substr(1)\r\n      }\r\n    : undefined;\r\n})();\r\n\r\nexport function getVendorPrefixedName(property: string) {\r\n  const name = camelCase(property);\r\n\r\n  if (!cache[name]) {\r\n    if (prefix !== undefined && testStyle[prefix.css + property] !== undefined) {\r\n      cache[name] = prefix.css + property;\r\n    } else if (testStyle[property] !== undefined) {\r\n      cache[name] = property;\r\n    }\r\n  }\r\n\r\n  return cache[name];\r\n}\r\n","import { getVendorPrefixedName } from './prefixes';\r\nimport { camelCase } from './camel-case';\r\n\r\n// browser detection and prefixing tools\r\nconst transform = typeof window !== 'undefined' ? getVendorPrefixedName('transform') : undefined;\r\nconst backfaceVisibility = typeof window !== 'undefined' ? getVendorPrefixedName('backfaceVisibility') : undefined;\r\nconst hasCSSTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('transform') : undefined;\r\nconst hasCSS3DTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('perspective') : undefined;\r\nconst ua = typeof window !== 'undefined' ? window.navigator.userAgent : 'Chrome';\r\nconst isSafari = /Safari\\//.test(ua) && !/Chrome\\//.test(ua);\r\n\r\nexport function translateXY(styles: any, x: number, y: number) {\r\n  if (typeof transform !== 'undefined' && hasCSSTransforms) {\r\n    if (!isSafari && hasCSS3DTransforms) {\r\n      styles[transform] = `translate3d(${x}px, ${y}px, 0)`;\r\n      styles[backfaceVisibility] = 'hidden';\r\n    } else {\r\n      styles[camelCase(transform)] = `translate(${x}px, ${y}px)`;\r\n    }\r\n  } else {\r\n    styles.top = `${y}px`;\r\n    styles.left = `${x}px`;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Output,\r\n  EventEmitter,\r\n  Input,\r\n  HostBinding,\r\n  ChangeDetectorRef,\r\n  ViewChild,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { ScrollerComponent } from './scroller.component';\r\nimport { MouseEvent } from '../../events';\r\nimport { SelectionType } from '../../types/selection.type';\r\nimport { columnsByPin, columnGroupWidths } from '../../utils/column';\r\nimport { RowHeightCache } from '../../utils/row-height-cache';\r\nimport { translateXY } from '../../utils/translate';\r\n\r\n@Component({\r\n  selector: 'datatable-body',\r\n  template: `\r\n    <datatable-selection\r\n      #selector\r\n      [selected]=\"selected\"\r\n      [rows]=\"rows\"\r\n      [selectCheck]=\"selectCheck\"\r\n      [selectEnabled]=\"selectEnabled\"\r\n      [selectionType]=\"selectionType\"\r\n      [rowIdentity]=\"rowIdentity\"\r\n      (select)=\"select.emit($event)\"\r\n      (activate)=\"activate.emit($event)\"\r\n    >\r\n      <datatable-progress *ngIf=\"loadingIndicator\"> </datatable-progress>\r\n      <datatable-scroller\r\n        *ngIf=\"rows?.length\"\r\n        [scrollbarV]=\"scrollbarV\"\r\n        [scrollbarH]=\"scrollbarH\"\r\n        [scrollHeight]=\"scrollHeight\"\r\n        [scrollWidth]=\"columnGroupWidths?.total\"\r\n        (scroll)=\"onBodyScroll($event)\"\r\n      >\r\n        <datatable-summary-row\r\n          *ngIf=\"summaryRow && summaryPosition === 'top'\"\r\n          [rowHeight]=\"summaryHeight\"\r\n          [offsetX]=\"offsetX\"\r\n          [innerWidth]=\"innerWidth\"\r\n          [rows]=\"rows\"\r\n          [columns]=\"columns\"\r\n        >\r\n        </datatable-summary-row>\r\n        <datatable-row-wrapper\r\n          [groupedRows]=\"groupedRows\"\r\n          *ngFor=\"let group of temp; let i = index; trackBy: rowTrackingFn\"\r\n          [innerWidth]=\"innerWidth\"\r\n          [ngStyle]=\"getRowsStyles(group)\"\r\n          [rowDetail]=\"rowDetail\"\r\n          [groupHeader]=\"groupHeader\"\r\n          [offsetX]=\"offsetX\"\r\n          [detailRowHeight]=\"getDetailRowHeight(group[i], i)\"\r\n          [row]=\"group\"\r\n          [expanded]=\"getRowExpanded(group)\"\r\n          [rowIndex]=\"getRowIndex(group[i])\"\r\n          (rowContextmenu)=\"rowContextmenu.emit($event)\"\r\n        >\r\n          <datatable-body-row\r\n            *ngIf=\"!groupedRows; else groupedRowsTemplate\"\r\n            tabindex=\"-1\"\r\n            [isSelected]=\"selector.getRowSelected(group)\"\r\n            [innerWidth]=\"innerWidth\"\r\n            [offsetX]=\"offsetX\"\r\n            [columns]=\"columns\"\r\n            [rowHeight]=\"getRowHeight(group)\"\r\n            [row]=\"group\"\r\n            [rowIndex]=\"getRowIndex(group)\"\r\n            [expanded]=\"getRowExpanded(group)\"\r\n            [rowClass]=\"rowClass\"\r\n            [displayCheck]=\"displayCheck\"\r\n            [treeStatus]=\"group.treeStatus\"\r\n            (treeAction)=\"onTreeAction(group)\"\r\n            (activate)=\"selector.onActivate($event, indexes.first + i)\"\r\n          >\r\n          </datatable-body-row>\r\n          <ng-template #groupedRowsTemplate>\r\n            <datatable-body-row\r\n              *ngFor=\"let row of group.value; let i = index; trackBy: rowTrackingFn\"\r\n              tabindex=\"-1\"\r\n              [isSelected]=\"selector.getRowSelected(row)\"\r\n              [innerWidth]=\"innerWidth\"\r\n              [offsetX]=\"offsetX\"\r\n              [columns]=\"columns\"\r\n              [rowHeight]=\"getRowHeight(row)\"\r\n              [row]=\"row\"\r\n              [group]=\"group.value\"\r\n              [rowIndex]=\"getRowIndex(row)\"\r\n              [expanded]=\"getRowExpanded(row)\"\r\n              [rowClass]=\"rowClass\"\r\n              (activate)=\"selector.onActivate($event, i)\"\r\n            >\r\n            </datatable-body-row>\r\n          </ng-template>\r\n        </datatable-row-wrapper>\r\n        <datatable-summary-row\r\n          *ngIf=\"summaryRow && summaryPosition === 'bottom'\"\r\n          [ngStyle]=\"getBottomSummaryRowStyles()\"\r\n          [rowHeight]=\"summaryHeight\"\r\n          [offsetX]=\"offsetX\"\r\n          [innerWidth]=\"innerWidth\"\r\n          [rows]=\"rows\"\r\n          [columns]=\"columns\"\r\n        >\r\n        </datatable-summary-row>\r\n      </datatable-scroller>\r\n      <div class=\"empty-row\" *ngIf=\"!rows?.length && !loadingIndicator\" [innerHTML]=\"emptyMessage\"></div>\r\n    </datatable-selection>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    class: 'datatable-body'\r\n  }\r\n})\r\nexport class DataTableBodyComponent implements OnInit, OnDestroy {\r\n  @Input() scrollbarV: boolean;\r\n  @Input() scrollbarH: boolean;\r\n  @Input() loadingIndicator: boolean;\r\n  @Input() externalPaging: boolean;\r\n  @Input() rowHeight: number | 'auto' | ((row?: any) => number);\r\n  @Input() offsetX: number;\r\n  @Input() emptyMessage: string;\r\n  @Input() selectionType: SelectionType;\r\n  @Input() selected: any[] = [];\r\n  @Input() rowIdentity: any;\r\n  @Input() rowDetail: any;\r\n  @Input() groupHeader: any;\r\n  @Input() selectCheck: any;\r\n  @Input() displayCheck: any;\r\n  @Input() trackByProp: string;\r\n  @Input() rowClass: any;\r\n  @Input() groupedRows: any;\r\n  @Input() groupExpansionDefault: boolean;\r\n  @Input() innerWidth: number;\r\n  @Input() groupRowsBy: string;\r\n  @Input() virtualization: boolean;\r\n  @Input() summaryRow: boolean;\r\n  @Input() summaryPosition: string;\r\n  @Input() summaryHeight: number;\r\n\r\n  @Input() set pageSize(val: number) {\r\n    this._pageSize = val;\r\n    this.recalcLayout();\r\n  }\r\n\r\n  get pageSize(): number {\r\n    return this._pageSize;\r\n  }\r\n\r\n  @Input() set rows(val: any[]) {\r\n    this._rows = val;\r\n    this.recalcLayout();\r\n  }\r\n\r\n  get rows(): any[] {\r\n    return this._rows;\r\n  }\r\n\r\n  @Input() set columns(val: any[]) {\r\n    this._columns = val;\r\n    const colsByPin = columnsByPin(val);\r\n    this.columnGroupWidths = columnGroupWidths(colsByPin, val);\r\n  }\r\n\r\n  get columns(): any[] {\r\n    return this._columns;\r\n  }\r\n\r\n  @Input() set offset(val: number) {\r\n    this._offset = val;\r\n    if (!this.scrollbarV || (this.scrollbarV && !this.virtualization))\r\n      this.recalcLayout();\r\n  }\r\n\r\n  get offset(): number {\r\n    return this._offset;\r\n  }\r\n\r\n  @Input() set rowCount(val: number) {\r\n    this._rowCount = val;\r\n    this.recalcLayout();\r\n  }\r\n\r\n  get rowCount(): number {\r\n    return this._rowCount;\r\n  }\r\n\r\n  @HostBinding('style.width')\r\n  get bodyWidth(): string {\r\n    if (this.scrollbarH) {\r\n      return this.innerWidth + 'px';\r\n    } else {\r\n      return '100%';\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  @HostBinding('style.height')\r\n  set bodyHeight(val) {\r\n    if (this.scrollbarV) {\r\n      this._bodyHeight = val + 'px';\r\n    } else {\r\n      this._bodyHeight = 'auto';\r\n    }\r\n\r\n    this.recalcLayout();\r\n  }\r\n\r\n  get bodyHeight() {\r\n    return this._bodyHeight;\r\n  }\r\n\r\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\r\n  @Output() page: EventEmitter<any> = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() detailToggle: EventEmitter<any> = new EventEmitter();\r\n  @Output() rowContextmenu = new EventEmitter<{ event: MouseEvent; row: any }>(false);\r\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ViewChild(ScrollerComponent, { static: false }) scroller: ScrollerComponent;\r\n\r\n  /**\r\n   * Returns if selection is enabled.\r\n   */\r\n  get selectEnabled(): boolean {\r\n    return !!this.selectionType;\r\n  }\r\n\r\n  /**\r\n   * Property that would calculate the height of scroll bar\r\n   * based on the row heights cache for virtual scroll and virtualization. Other scenarios\r\n   * calculate scroll height automatically (as height will be undefined).\r\n   */\r\n  get scrollHeight(): number | undefined {\r\n    if (this.scrollbarV && this.virtualization && this.rowCount) {\r\n      return this.rowHeightsCache.query(this.rowCount - 1);\r\n    }\r\n    // avoid TS7030: Not all code paths return a value.\r\n    return undefined;\r\n  }\r\n\r\n  rowHeightsCache: RowHeightCache = new RowHeightCache();\r\n  temp: any[] = [];\r\n  offsetY = 0;\r\n  indexes: any = {};\r\n  columnGroupWidths: any;\r\n  columnGroupWidthsWithoutGroup: any;\r\n  rowTrackingFn: any;\r\n  listener: any;\r\n  rowIndexes: any = new Map();\r\n  rowExpansions: any[] = [];\r\n\r\n  _rows: any[];\r\n  _bodyHeight: any;\r\n  _columns: any[];\r\n  _rowCount: number;\r\n  _offset: number;\r\n  _pageSize: number;\r\n\r\n  /**\r\n   * Creates an instance of DataTableBodyComponent.\r\n   */\r\n  constructor(private cd: ChangeDetectorRef) {\r\n    // declare fn here so we can get access to the `this` property\r\n    this.rowTrackingFn = (index: number, row: any): any => {\r\n      const idx = this.getRowIndex(row);\r\n      if (this.trackByProp) {\r\n        return row[this.trackByProp];\r\n      } else {\r\n        return idx;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Called after the constructor, initializing input properties\r\n   */\r\n  ngOnInit(): void {\r\n    if (this.rowDetail) {\r\n      this.listener = this.rowDetail.toggle.subscribe(({ type, value }: { type: string; value: any }) => {\r\n        if (type === 'row') {\r\n          this.toggleRowExpansion(value);\r\n        }\r\n        if (type === 'all') {\r\n          this.toggleAllRows(value);\r\n        }\r\n\r\n        // Refresh rows after toggle\r\n        // Fixes #883\r\n        this.updateIndexes();\r\n        this.updateRows();\r\n        this.cd.markForCheck();\r\n      });\r\n    }\r\n\r\n    if (this.groupHeader) {\r\n      this.listener = this.groupHeader.toggle.subscribe(({ type, value }: { type: string; value: any }) => {\r\n        if (type === 'group') {\r\n          this.toggleRowExpansion(value);\r\n        }\r\n        if (type === 'all') {\r\n          this.toggleAllRows(value);\r\n        }\r\n\r\n        // Refresh rows after toggle\r\n        // Fixes #883\r\n        this.updateIndexes();\r\n        this.updateRows();\r\n        this.cd.markForCheck();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called once, before the instance is destroyed.\r\n   */\r\n  ngOnDestroy(): void {\r\n    if (this.rowDetail || this.groupHeader) {\r\n      this.listener.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the Y offset given a new offset.\r\n   */\r\n  updateOffsetY(offset?: number): void {\r\n    // scroller is missing on empty table\r\n    if (!this.scroller) {\r\n      return;\r\n    }\r\n\r\n    if (this.scrollbarV && this.virtualization && offset) {\r\n      // First get the row Index that we need to move to.\r\n      const rowIndex = this.pageSize * offset;\r\n      offset = this.rowHeightsCache.query(rowIndex - 1);\r\n    } else if (this.scrollbarV && !this.virtualization) {\r\n      offset = 0;\r\n    }\r\n\r\n    this.scroller.setOffset(offset || 0);\r\n  }\r\n\r\n  /**\r\n   * Body was scrolled, this is mainly useful for\r\n   * when a user is server-side pagination via virtual scroll.\r\n   */\r\n  onBodyScroll(event: any): void {\r\n    const scrollYPos: number = event.scrollYPos;\r\n    const scrollXPos: number = event.scrollXPos;\r\n\r\n    // if scroll change, trigger update\r\n    // this is mainly used for header cell positions\r\n    if (this.offsetY !== scrollYPos || this.offsetX !== scrollXPos) {\r\n      this.scroll.emit({\r\n        offsetY: scrollYPos,\r\n        offsetX: scrollXPos\r\n      });\r\n    }\r\n\r\n    this.offsetY = scrollYPos;\r\n    this.offsetX = scrollXPos;\r\n\r\n    this.updateIndexes();\r\n    this.updatePage(event.direction);\r\n    this.updateRows();\r\n  }\r\n\r\n  /**\r\n   * Updates the page given a direction.\r\n   */\r\n  updatePage(direction: string): void {\r\n    let offset = this.indexes.first / this.pageSize;\r\n\r\n    if (direction === 'up') {\r\n      offset = Math.ceil(offset);\r\n    } else if (direction === 'down') {\r\n      offset = Math.floor(offset);\r\n    }\r\n\r\n    if (direction !== undefined && !isNaN(offset)) {\r\n      this.page.emit({ offset });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the rows in the view port\r\n   */\r\n  updateRows(): void {\r\n    const { first, last } = this.indexes;\r\n    let rowIndex = first;\r\n    let idx = 0;\r\n    const temp: any[] = [];\r\n\r\n    this.rowIndexes.clear();\r\n\r\n    // if grouprowsby has been specified treat row paging\r\n    // parameters as group paging parameters ie if limit 10 has been\r\n    // specified treat it as 10 groups rather than 10 rows\r\n    if (this.groupedRows) {\r\n      let maxRowsPerGroup = 3;\r\n      // if there is only one group set the maximum number of\r\n      // rows per group the same as the total number of rows\r\n      if (this.groupedRows.length === 1) {\r\n        maxRowsPerGroup = this.groupedRows[0].value.length;\r\n      }\r\n\r\n      while (rowIndex < last && rowIndex < this.groupedRows.length) {\r\n        // Add the groups into this page\r\n        const group = this.groupedRows[rowIndex];\r\n        temp[idx] = group;\r\n        idx++;\r\n\r\n        // Group index in this context\r\n        rowIndex++;\r\n      }\r\n    } else {\r\n      while (rowIndex < last && rowIndex < this.rowCount) {\r\n        const row = this.rows[rowIndex];\r\n\r\n        if (row) {\r\n          this.rowIndexes.set(row, rowIndex);\r\n          temp[idx] = row;\r\n        }\r\n\r\n        idx++;\r\n        rowIndex++;\r\n      }\r\n    }\r\n\r\n    this.temp = temp;\r\n  }\r\n\r\n  /**\r\n   * Get the row height\r\n   */\r\n  getRowHeight(row: any): number {\r\n    // if its a function return it\r\n    if (typeof this.rowHeight === 'function') {\r\n      return this.rowHeight(row);\r\n    }\r\n\r\n    return this.rowHeight as number;\r\n  }\r\n\r\n  /**\r\n   * @param group the group with all rows\r\n   */\r\n  getGroupHeight(group: any): number {\r\n    let rowHeight = 0;\r\n\r\n    if (group.value) {\r\n      for (let index = 0; index < group.value.length; index++) {\r\n        rowHeight += this.getRowAndDetailHeight(group.value[index]);\r\n      }\r\n    }\r\n\r\n    return rowHeight;\r\n  }\r\n\r\n  /**\r\n   * Calculate row height based on the expanded state of the row.\r\n   */\r\n  getRowAndDetailHeight(row: any): number {\r\n    let rowHeight = this.getRowHeight(row);\r\n    const expanded = this.getRowExpanded(row);\r\n\r\n    // Adding detail row height if its expanded.\r\n    if (expanded) {\r\n      rowHeight += this.getDetailRowHeight(row);\r\n    }\r\n\r\n    return rowHeight;\r\n  }\r\n\r\n  /**\r\n   * Get the height of the detail row.\r\n   */\r\n  getDetailRowHeight = (row?: any, index?: any): number => {\r\n    if (!this.rowDetail) {\r\n      return 0;\r\n    }\r\n    const rowHeight = this.rowDetail.rowHeight;\r\n    return typeof rowHeight === 'function' ? rowHeight(row, index) : (rowHeight as number);\r\n  };\r\n\r\n  /**\r\n   * Calculates the styles for the row so that the rows can be moved in 2D space\r\n   * during virtual scroll inside the DOM.   In the below case the Y position is\r\n   * manipulated.   As an example, if the height of row 0 is 30 px and row 1 is\r\n   * 100 px then following styles are generated:\r\n   *\r\n   * transform: translate3d(0px, 0px, 0px);    ->  row0\r\n   * transform: translate3d(0px, 30px, 0px);   ->  row1\r\n   * transform: translate3d(0px, 130px, 0px);  ->  row2\r\n   *\r\n   * Row heights have to be calculated based on the row heights cache as we wont\r\n   * be able to determine which row is of what height before hand.  In the above\r\n   * case the positionY of the translate3d for row2 would be the sum of all the\r\n   * heights of the rows before it (i.e. row0 and row1).\r\n   *\r\n   * @param rows the row that needs to be placed in the 2D space.\r\n   * @returns the CSS3 style to be applied\r\n   *\r\n   * @memberOf DataTableBodyComponent\r\n   */\r\n  getRowsStyles(rows: any): any {\r\n    const styles: any = {};\r\n\r\n    // only add styles for the group if there is a group\r\n    if (this.groupedRows) {\r\n      styles.width = this.columnGroupWidths.total;\r\n    }\r\n\r\n    if (this.scrollbarV && this.virtualization) {\r\n      let idx = 0;\r\n\r\n      if (this.groupedRows) {\r\n        // Get the latest row rowindex in a group\r\n        const row = rows[rows.length - 1];\r\n        idx = row ? this.getRowIndex(row) : 0;\r\n      } else {\r\n        idx = this.getRowIndex(rows);\r\n      }\r\n\r\n      // const pos = idx * rowHeight;\r\n      // The position of this row would be the sum of all row heights\r\n      // until the previous row position.\r\n      const pos = this.rowHeightsCache.query(idx - 1);\r\n\r\n      translateXY(styles, 0, pos);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  /**\r\n   * Calculate bottom summary row offset for scrollbar mode.\r\n   * For more information about cache and offset calculation\r\n   * see description for `getRowsStyles` method\r\n   *\r\n   * @returns the CSS3 style to be applied\r\n   *\r\n   * @memberOf DataTableBodyComponent\r\n   */\r\n  getBottomSummaryRowStyles(): any {\r\n    if (!this.scrollbarV || !this.rows || !this.rows.length) {\r\n      return null;\r\n    }\r\n\r\n    const styles = { position: 'absolute' };\r\n    const pos = this.rowHeightsCache.query(this.rows.length - 1);\r\n\r\n    translateXY(styles, 0, pos);\r\n\r\n    return styles;\r\n  }\r\n\r\n  /**\r\n   * Hides the loading indicator\r\n   */\r\n  hideIndicator(): void {\r\n    setTimeout(() => (this.loadingIndicator = false), 500);\r\n  }\r\n\r\n  /**\r\n   * Updates the index of the rows in the viewport\r\n   */\r\n  updateIndexes(): void {\r\n    let first = 0;\r\n    let last = 0;\r\n\r\n    if (this.scrollbarV) {\r\n      if (this.virtualization) {\r\n        // Calculation of the first and last indexes will be based on where the\r\n        // scrollY position would be at.  The last index would be the one\r\n        // that shows up inside the view port the last.\r\n        const height = parseInt(this.bodyHeight, 0);\r\n        first = this.rowHeightsCache.getRowIndex(this.offsetY);\r\n        last = this.rowHeightsCache.getRowIndex(height + this.offsetY) + 1;\r\n      } else {\r\n        // If virtual rows are not needed\r\n        // We render all in one go\r\n        first = 0;\r\n        last = this.rowCount;\r\n      }\r\n    } else {\r\n      // The server is handling paging and will pass an array that begins with the\r\n      // element at a specified offset.  first should always be 0 with external paging.\r\n      if (!this.externalPaging) {\r\n        first = Math.max(this.offset * this.pageSize, 0);\r\n      }\r\n      last = Math.min(first + this.pageSize, this.rowCount);\r\n    }\r\n\r\n    this.indexes = { first, last };\r\n  }\r\n\r\n  /**\r\n   * Refreshes the full Row Height cache.  Should be used\r\n   * when the entire row array state has changed.\r\n   */\r\n  refreshRowHeightCache(): void {\r\n    if (!this.scrollbarV || (this.scrollbarV && !this.virtualization)) {\r\n      return;\r\n    }\r\n\r\n    // clear the previous row height cache if already present.\r\n    // this is useful during sorts, filters where the state of the\r\n    // rows array is changed.\r\n    this.rowHeightsCache.clearCache();\r\n\r\n    // Initialize the tree only if there are rows inside the tree.\r\n    if (this.rows && this.rows.length) {\r\n      const rowExpansions = new Set();\r\n      for (const row of this.rows) {\r\n        if (this.getRowExpanded(row)) {\r\n          rowExpansions.add(row);\r\n        }\r\n      }\r\n\r\n      this.rowHeightsCache.initCache({\r\n        rows: this.rows,\r\n        rowHeight: this.rowHeight,\r\n        detailRowHeight: this.getDetailRowHeight,\r\n        externalVirtual: this.scrollbarV && this.externalPaging,\r\n        rowCount: this.rowCount,\r\n        rowIndexes: this.rowIndexes,\r\n        rowExpansions\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the index for the view port\r\n   */\r\n  getAdjustedViewPortIndex(): number {\r\n    // Capture the row index of the first row that is visible on the viewport.\r\n    // If the scroll bar is just below the row which is highlighted then make that as the\r\n    // first index.\r\n    const viewPortFirstRowIndex = this.indexes.first;\r\n\r\n    if (this.scrollbarV && this.virtualization) {\r\n      const offsetScroll = this.rowHeightsCache.query(viewPortFirstRowIndex - 1);\r\n      return offsetScroll <= this.offsetY ? viewPortFirstRowIndex - 1 : viewPortFirstRowIndex;\r\n    }\r\n\r\n    return viewPortFirstRowIndex;\r\n  }\r\n\r\n  /**\r\n   * Toggle the Expansion of the row i.e. if the row is expanded then it will\r\n   * collapse and vice versa.   Note that the expanded status is stored as\r\n   * a part of the row object itself as we have to preserve the expanded row\r\n   * status in case of sorting and filtering of the row set.\r\n   */\r\n  toggleRowExpansion(row: any): void {\r\n    // Capture the row index of the first row that is visible on the viewport.\r\n    const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\r\n    const rowExpandedIdx = this.getRowExpandedIdx(row, this.rowExpansions);\r\n    const expanded = rowExpandedIdx > -1;\r\n\r\n    // If the detailRowHeight is auto --> only in case of non-virtualized scroll\r\n    if (this.scrollbarV && this.virtualization) {\r\n      const detailRowHeight = this.getDetailRowHeight(row) * (expanded ? -1 : 1);\r\n      // const idx = this.rowIndexes.get(row) || 0;\r\n      const idx = this.getRowIndex(row);\r\n      this.rowHeightsCache.update(idx, detailRowHeight);\r\n    }\r\n\r\n    // Update the toggled row and update thive nevere heights in the cache.\r\n    if (expanded) {\r\n      this.rowExpansions.splice(rowExpandedIdx, 1);\r\n    } else {\r\n      this.rowExpansions.push(row);\r\n    }\r\n\r\n    this.detailToggle.emit({\r\n      rows: [row],\r\n      currentIndex: viewPortFirstRowIndex\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Expand/Collapse all the rows no matter what their state is.\r\n   */\r\n  toggleAllRows(expanded: boolean): void {\r\n    // clear prev expansions\r\n    this.rowExpansions = [];\r\n\r\n    // Capture the row index of the first row that is visible on the viewport.\r\n    const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\r\n\r\n    if (expanded) {\r\n      for (const row of this.rows) {\r\n        this.rowExpansions.push(row);\r\n      }\r\n    }\r\n\r\n    if (this.scrollbarV) {\r\n      // Refresh the full row heights cache since every row was affected.\r\n      this.recalcLayout();\r\n    }\r\n\r\n    // Emit all rows that have been expanded.\r\n    this.detailToggle.emit({\r\n      rows: this.rows,\r\n      currentIndex: viewPortFirstRowIndex\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Recalculates the table\r\n   */\r\n  recalcLayout(): void {\r\n    this.refreshRowHeightCache();\r\n    this.updateIndexes();\r\n    this.updateRows();\r\n  }\r\n\r\n  /**\r\n   * Tracks the column\r\n   */\r\n  columnTrackingFn(index: number, column: any): any {\r\n    return column.$$id;\r\n  }\r\n\r\n  /**\r\n   * Gets the row pinning group styles\r\n   */\r\n  stylesByGroup(group: string) {\r\n    const widths = this.columnGroupWidths;\r\n    const offsetX = this.offsetX;\r\n\r\n    const styles = {\r\n      width: `${widths[group]}px`\r\n    };\r\n\r\n    if (group === 'left') {\r\n      translateXY(styles, offsetX, 0);\r\n    } else if (group === 'right') {\r\n      const bodyWidth = parseInt(this.innerWidth + '', 0);\r\n      const totalDiff = widths.total - bodyWidth;\r\n      const offsetDiff = totalDiff - offsetX;\r\n      const offset = offsetDiff * -1;\r\n      translateXY(styles, offset, 0);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  /**\r\n   * Returns if the row was expanded and set default row expansion when row expansion is empty\r\n   */\r\n  getRowExpanded(row: any): boolean {\r\n    if (this.rowExpansions.length === 0 && this.groupExpansionDefault) {\r\n      for (const group of this.groupedRows) {\r\n        this.rowExpansions.push(group);\r\n      }\r\n    }\r\n\r\n    return this.getRowExpandedIdx(row, this.rowExpansions) > -1;\r\n  }\r\n\r\n  getRowExpandedIdx(row: any, expanded: any[]): number {\r\n    if (!expanded || !expanded.length) return -1;\r\n\r\n    const rowId = this.rowIdentity(row);\r\n    return expanded.findIndex((r) => {\r\n      const id = this.rowIdentity(r);\r\n      return id === rowId;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the row index given a row\r\n   */\r\n  getRowIndex(row: any): number {\r\n    return this.rowIndexes.get(row) || 0;\r\n  }\r\n\r\n  onTreeAction(row: any) {\r\n    this.treeAction.emit({ row });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Output,\r\n  EventEmitter,\r\n  Input,\r\n  HostBinding,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy, OnDestroy\r\n} from '@angular/core';\r\nimport { MouseEvent } from '../../events';\r\nimport { columnsByPin, columnGroupWidths, columnsByPinArr } from '../../utils/column';\r\nimport { SortType } from '../../types/sort.type';\r\nimport { SelectionType } from '../../types/selection.type';\r\nimport { DataTableColumnDirective } from '../columns/column.directive';\r\nimport { translateXY } from '../../utils/translate';\r\n\r\n@Component({\r\n  selector: 'datatable-header',\r\n  template: `\r\n    <div\r\n      orderable\r\n      (reorder)=\"onColumnReordered($event)\"\r\n      (targetChanged)=\"onTargetChanged($event)\"\r\n      [style.width.px]=\"_columnGroupWidths.total\"\r\n      class=\"datatable-header-inner\"\r\n    >\r\n      <div\r\n        *ngFor=\"let colGroup of _columnsByPin; trackBy: trackByGroups\"\r\n        [class]=\"'datatable-row-' + colGroup.type\"\r\n        [ngStyle]=\"_styleByGroup[colGroup.type]\"\r\n      >\r\n        <datatable-header-cell\r\n          *ngFor=\"let column of colGroup.columns; trackBy: columnTrackingFn\"\r\n          resizeable\r\n          [resizeEnabled]=\"column.resizeable\"\r\n          (resize)=\"onColumnResized($event, column)\"\r\n          long-press\r\n          [pressModel]=\"column\"\r\n          [pressEnabled]=\"reorderable && column.draggable\"\r\n          (longPressStart)=\"onLongPressStart($event)\"\r\n          (longPressEnd)=\"onLongPressEnd($event)\"\r\n          draggable\r\n          [dragX]=\"reorderable && column.draggable && column.dragging\"\r\n          [dragY]=\"false\"\r\n          [dragModel]=\"column\"\r\n          [dragEventTarget]=\"dragEventTarget\"\r\n          [headerHeight]=\"headerHeight\"\r\n          [isTarget]=\"column.isTarget\"\r\n          [targetMarkerTemplate]=\"targetMarkerTemplate\"\r\n          [targetMarkerContext]=\"column.targetMarkerContext\"\r\n          [column]=\"column\"\r\n          [sortType]=\"sortType\"\r\n          [sorts]=\"sorts\"\r\n          [selectionType]=\"selectionType\"\r\n          [sortAscendingIcon]=\"sortAscendingIcon\"\r\n          [sortDescendingIcon]=\"sortDescendingIcon\"\r\n          [allRowsSelected]=\"allRowsSelected\"\r\n          (sort)=\"onSort($event)\"\r\n          (select)=\"select.emit($event)\"\r\n          (columnContextmenu)=\"columnContextmenu.emit($event)\"\r\n        >\r\n        </datatable-header-cell>\r\n      </div>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'datatable-header'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTableHeaderComponent implements OnDestroy {\r\n  @Input() sortAscendingIcon: any;\r\n  @Input() sortDescendingIcon: any;\r\n  @Input() scrollbarH: boolean;\r\n  @Input() dealsWithGroup: boolean;\r\n  @Input() targetMarkerTemplate: any;\r\n\r\n  targetMarkerContext: any;\r\n\r\n  @Input() set innerWidth(val: number) {\r\n    this._innerWidth = val;\r\n    setTimeout(() => {\r\n      if (this._columns) {\r\n        const colByPin = columnsByPin(this._columns);\r\n        this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\r\n        this.setStylesByGroup();\r\n      }\r\n    });\r\n  }\r\n\r\n  get innerWidth(): number {\r\n    return this._innerWidth;\r\n  }\r\n\r\n  @Input() sorts: any[];\r\n  @Input() sortType: SortType;\r\n  @Input() allRowsSelected: boolean;\r\n  @Input() selectionType: SelectionType;\r\n  @Input() reorderable: boolean;\r\n\r\n  dragEventTarget: any;\r\n\r\n  @HostBinding('style.height')\r\n  @Input()\r\n  set headerHeight(val: any) {\r\n    if (val !== 'auto') {\r\n      this._headerHeight = `${val}px`;\r\n    } else {\r\n      this._headerHeight = val;\r\n    }\r\n  }\r\n\r\n  get headerHeight(): any {\r\n    return this._headerHeight;\r\n  }\r\n\r\n  @Input() set columns(val: any[]) {\r\n    this._columns = val;\r\n\r\n    const colsByPin = columnsByPin(val);\r\n    this._columnsByPin = columnsByPinArr(val);\r\n    setTimeout(() => {\r\n      this._columnGroupWidths = columnGroupWidths(colsByPin, val);\r\n      this.setStylesByGroup();\r\n    });\r\n  }\r\n\r\n  get columns(): any[] {\r\n    return this._columns;\r\n  }\r\n\r\n  @Input()\r\n  set offsetX(val: number) {\r\n    this._offsetX = val;\r\n    this.setStylesByGroup();\r\n  }\r\n  get offsetX() {\r\n    return this._offsetX;\r\n  }\r\n\r\n  @Output() sort: EventEmitter<any> = new EventEmitter();\r\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\r\n  @Output() resize: EventEmitter<any> = new EventEmitter();\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() columnContextmenu = new EventEmitter<{ event: MouseEvent; column: any }>(false);\r\n\r\n  _columnsByPin: any;\r\n  _columnGroupWidths: any = {\r\n    total: 100\r\n  };\r\n  _innerWidth: number;\r\n  _offsetX: number;\r\n  _columns: any[];\r\n  _headerHeight: string;\r\n  _styleByGroup: { [prop: string]: {} } = {\r\n    left: {},\r\n    center: {},\r\n    right: {}\r\n  };\r\n\r\n  private destroyed = false;\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyed = true;\r\n  }\r\n\r\n  onLongPressStart({ event, model }: { event: any; model: any }) {\r\n    model.dragging = true;\r\n    this.dragEventTarget = event;\r\n  }\r\n\r\n  onLongPressEnd({ event, model }: { event: any; model: any }) {\r\n    this.dragEventTarget = event;\r\n\r\n    // delay resetting so sort can be\r\n    // prevented if we were dragging\r\n    setTimeout(() => {\r\n      // datatable component creates copies from columns on reorder\r\n      // set dragging to false on new objects\r\n      const column = this._columns.find(c => c.$$id === model.$$id);\r\n      if (column) {\r\n        column.dragging = false;\r\n      }\r\n    }, 5);\r\n  }\r\n\r\n  @HostBinding('style.width')\r\n  get headerWidth(): string {\r\n    if (this.scrollbarH) {\r\n      return this.innerWidth + 'px';\r\n    }\r\n\r\n    return '100%';\r\n  }\r\n\r\n  trackByGroups(index: number, colGroup: any): any {\r\n    return colGroup.type;\r\n  }\r\n\r\n  columnTrackingFn(index: number, column: any): any {\r\n    return column.$$id;\r\n  }\r\n\r\n  onColumnResized(width: number, column: DataTableColumnDirective): void {\r\n    if (width <= column.minWidth) {\r\n      width = column.minWidth;\r\n    } else if (width >= column.maxWidth) {\r\n      width = column.maxWidth;\r\n    }\r\n\r\n    this.resize.emit({\r\n      column,\r\n      prevValue: column.width,\r\n      newValue: width\r\n    });\r\n  }\r\n\r\n  onColumnReordered({ prevIndex, newIndex, model }: any): void {\r\n    const column = this.getColumn(newIndex);\r\n    column.isTarget = false;\r\n    column.targetMarkerContext = undefined;\r\n    this.reorder.emit({\r\n      column: model,\r\n      prevValue: prevIndex,\r\n      newValue: newIndex\r\n    });\r\n  }\r\n\r\n  onTargetChanged({ prevIndex, newIndex, initialIndex }: any): void {\r\n    if (prevIndex || prevIndex === 0) {\r\n      const oldColumn = this.getColumn(prevIndex);\r\n      oldColumn.isTarget = false;\r\n      oldColumn.targetMarkerContext = undefined;\r\n    }\r\n    if (newIndex || newIndex === 0) {\r\n      const newColumn = this.getColumn(newIndex);\r\n      newColumn.isTarget = true;\r\n\r\n      if (initialIndex !== newIndex) {\r\n        newColumn.targetMarkerContext = {\r\n          class: 'targetMarker '.concat(initialIndex > newIndex ? 'dragFromRight' : 'dragFromLeft')\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  getColumn(index: number): any {\r\n    const leftColumnCount = this._columnsByPin[0].columns.length;\r\n    if (index < leftColumnCount) {\r\n      return this._columnsByPin[0].columns[index];\r\n    }\r\n\r\n    const centerColumnCount = this._columnsByPin[1].columns.length;\r\n    if (index < leftColumnCount + centerColumnCount) {\r\n      return this._columnsByPin[1].columns[index - leftColumnCount];\r\n    }\r\n\r\n    return this._columnsByPin[2].columns[index - leftColumnCount - centerColumnCount];\r\n  }\r\n\r\n  onSort({ column, prevValue, newValue }: any): void {\r\n    // if we are dragging don't sort!\r\n    if (column.dragging) {\r\n      return;\r\n    }\r\n\r\n    const sorts = this.calcNewSorts(column, prevValue, newValue);\r\n    this.sort.emit({\r\n      sorts,\r\n      column,\r\n      prevValue,\r\n      newValue\r\n    });\r\n  }\r\n\r\n  calcNewSorts(column: any, prevValue: number, newValue: number): any[] {\r\n    let idx = 0;\r\n\r\n    if (!this.sorts) {\r\n      this.sorts = [];\r\n    }\r\n\r\n    const sorts = this.sorts.map((s, i) => {\r\n      s = { ...s };\r\n      if (s.prop === column.prop) {\r\n        idx = i;\r\n      }\r\n      return s;\r\n    });\r\n\r\n    if (newValue === undefined) {\r\n      sorts.splice(idx, 1);\r\n    } else if (prevValue) {\r\n      sorts[idx].dir = newValue;\r\n    } else {\r\n      if (this.sortType === SortType.single) {\r\n        sorts.splice(0, this.sorts.length);\r\n      }\r\n\r\n      sorts.push({ dir: newValue, prop: column.prop });\r\n    }\r\n\r\n    return sorts;\r\n  }\r\n\r\n  setStylesByGroup() {\r\n    this._styleByGroup.left = this.calcStylesByGroup('left');\r\n    this._styleByGroup.center = this.calcStylesByGroup('center');\r\n    this._styleByGroup.right = this.calcStylesByGroup('right');\r\n    if (!this.destroyed) {\r\n      this.cd.detectChanges();\r\n    }\r\n  }\r\n\r\n  calcStylesByGroup(group: string): any {\r\n    const widths = this._columnGroupWidths;\r\n    const offsetX = this.offsetX;\r\n\r\n    const styles = {\r\n      width: `${widths[group]}px`\r\n    };\r\n\r\n    if (group === 'center') {\r\n      translateXY(styles, offsetX * -1, 0);\r\n    } else if (group === 'right') {\r\n      const totalDiff = widths.total - this.innerWidth;\r\n      const offset = totalDiff * -1;\r\n      translateXY(styles, offset, 0);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n}\r\n","/**\r\n * Throttle a function\r\n */\r\nexport function throttle(func: any, wait: number, options?: any) {\r\n  options = options || {};\r\n  let context: any;\r\n  let args: any;\r\n  let result: any;\r\n  let timeout: any = null;\r\n  let previous = 0;\r\n\r\n  function later() {\r\n    previous = options.leading === false ? 0 : +new Date();\r\n    timeout = null;\r\n    result = func.apply(context, args);\r\n  }\r\n\r\n  return function(this: any) {\r\n    const now = +new Date();\r\n\r\n    if (!previous && options.leading === false) {\r\n      previous = now;\r\n    }\r\n\r\n    const remaining = wait - (now - previous);\r\n    context = this;\r\n    args = arguments;\r\n\r\n    if (remaining <= 0) {\r\n      clearTimeout(timeout);\r\n      timeout = null;\r\n      previous = now;\r\n      result = func.apply(context, args);\r\n    } else if (!timeout && options.trailing !== false) {\r\n      timeout = setTimeout(later, remaining);\r\n    }\r\n\r\n    return result;\r\n  };\r\n}\r\n\r\n/**\r\n * Throttle decorator\r\n *\r\n *  class MyClass {\r\n *    throttleable(10)\r\n *    myFn() { ... }\r\n *  }\r\n */\r\nexport function throttleable(duration: number, options?: any) {\r\n  return function innerDecorator(target: any, key: PropertyKey, descriptor: PropertyDescriptor) {\r\n    return {\r\n      configurable: true,\r\n      enumerable: descriptor.enumerable,\r\n      get: function getter() {\r\n        Object.defineProperty(this, key, {\r\n          configurable: true,\r\n          enumerable: descriptor.enumerable,\r\n          value: throttle(descriptor.value, duration, options)\r\n        });\r\n\r\n        return this[key];\r\n      }\r\n    };\r\n  };\r\n}\r\n","import { columnsByPin, columnsTotalWidth } from './column';\r\n\r\n/**\r\n * Calculates the Total Flex Grow\r\n */\r\nexport function getTotalFlexGrow(columns: any[]) {\r\n  let totalFlexGrow = 0;\r\n\r\n  for (const c of columns) {\r\n    totalFlexGrow += c.flexGrow || 0;\r\n  }\r\n\r\n  return totalFlexGrow;\r\n}\r\n\r\n/**\r\n * Adjusts the column widths.\r\n * Inspired by: https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableWidthHelper.js\r\n */\r\nexport function adjustColumnWidths(allColumns: any, expectedWidth: any) {\r\n  const columnsWidth = columnsTotalWidth(allColumns);\r\n  const totalFlexGrow = getTotalFlexGrow(allColumns);\r\n  const colsByGroup = columnsByPin(allColumns);\r\n\r\n  if (columnsWidth !== expectedWidth) {\r\n    scaleColumns(colsByGroup, expectedWidth, totalFlexGrow);\r\n  }\r\n}\r\n\r\n/**\r\n * Resizes columns based on the flexGrow property, while respecting manually set widths\r\n */\r\nfunction scaleColumns(colsByGroup: any, maxWidth: any, totalFlexGrow: any) {\r\n  // calculate total width and flexgrow points for coulumns that can be resized\r\n  for (const attr in colsByGroup) {\r\n    for (const column of colsByGroup[attr]) {\r\n      if (!column.canAutoResize) {\r\n        maxWidth -= column.width;\r\n        totalFlexGrow -= column.flexGrow ? column.flexGrow : 0;\r\n      } else {\r\n        column.width = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  const hasMinWidth = {};\r\n  let remainingWidth = maxWidth;\r\n\r\n  // resize columns until no width is left to be distributed\r\n  do {\r\n    const widthPerFlexPoint = remainingWidth / totalFlexGrow;\r\n    remainingWidth = 0;\r\n\r\n    for (const attr in colsByGroup) {\r\n      for (const column of colsByGroup[attr]) {\r\n        // if the column can be resize and it hasn't reached its minimum width yet\r\n        if (column.canAutoResize && !hasMinWidth[column.prop]) {\r\n          const newWidth = column.width + column.flexGrow * widthPerFlexPoint;\r\n          if (column.minWidth !== undefined && newWidth < column.minWidth) {\r\n            remainingWidth += newWidth - column.minWidth;\r\n            column.width = column.minWidth;\r\n            hasMinWidth[column.prop] = true;\r\n          } else {\r\n            column.width = newWidth;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } while (remainingWidth !== 0);\r\n}\r\n\r\n/**\r\n * Forces the width of the columns to\r\n * distribute equally but overflowing when necessary\r\n *\r\n * Rules:\r\n *\r\n *  - If combined withs are less than the total width of the grid,\r\n *    proportion the widths given the min / max / normal widths to fill the width.\r\n *\r\n *  - If the combined widths, exceed the total width of the grid,\r\n *    use the standard widths.\r\n *\r\n *  - If a column is resized, it should always use that width\r\n *\r\n *  - The proportional widths should never fall below min size if specified.\r\n *\r\n *  - If the grid starts off small but then becomes greater than the size ( + / - )\r\n *    the width should use the original width; not the newly proportioned widths.\r\n */\r\nexport function forceFillColumnWidths(\r\n  allColumns: any[],\r\n  expectedWidth: number,\r\n  startIdx: number,\r\n  allowBleed: boolean,\r\n  defaultColWidth: number = 300\r\n) {\r\n  const columnsToResize = allColumns.slice(startIdx + 1, allColumns.length).filter(c => {\r\n    return c.canAutoResize !== false;\r\n  });\r\n\r\n  for (const column of columnsToResize) {\r\n    if (!column.$$oldWidth) {\r\n      column.$$oldWidth = column.width;\r\n    }\r\n  }\r\n\r\n  let additionWidthPerColumn = 0;\r\n  let exceedsWindow = false;\r\n  let contentWidth = getContentWidth(allColumns, defaultColWidth);\r\n  let remainingWidth = expectedWidth - contentWidth;\r\n  const columnsProcessed: any[] = [];\r\n  const remainingWidthLimit = 1; // when to stop\r\n\r\n  // This loop takes care of the\r\n  do {\r\n    additionWidthPerColumn = remainingWidth / columnsToResize.length;\r\n    exceedsWindow = contentWidth >= expectedWidth;\r\n\r\n    for (const column of columnsToResize) {\r\n      if (exceedsWindow && allowBleed) {\r\n        column.width = column.$$oldWidth || column.width || defaultColWidth;\r\n      } else {\r\n        const newSize = (column.width || defaultColWidth) + additionWidthPerColumn;\r\n\r\n        if (column.minWidth && newSize < column.minWidth) {\r\n          column.width = column.minWidth;\r\n          columnsProcessed.push(column);\r\n        } else if (column.maxWidth && newSize > column.maxWidth) {\r\n          column.width = column.maxWidth;\r\n          columnsProcessed.push(column);\r\n        } else {\r\n          column.width = newSize;\r\n        }\r\n      }\r\n\r\n      column.width = Math.max(0, column.width);\r\n    }\r\n\r\n    contentWidth = getContentWidth(allColumns);\r\n    remainingWidth = expectedWidth - contentWidth;\r\n    removeProcessedColumns(columnsToResize, columnsProcessed);\r\n  } while (remainingWidth > remainingWidthLimit && columnsToResize.length !== 0);\r\n}\r\n\r\n/**\r\n * Remove the processed columns from the current active columns.\r\n */\r\nfunction removeProcessedColumns(columnsToResize: any[], columnsProcessed: any[]) {\r\n  for (const column of columnsProcessed) {\r\n    const index = columnsToResize.indexOf(column);\r\n    columnsToResize.splice(index, 1);\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the width of the columns\r\n */\r\nfunction getContentWidth(allColumns: any, defaultColWidth: number = 300): number {\r\n  let contentWidth = 0;\r\n\r\n  for (const column of allColumns) {\r\n    contentWidth += column.width || defaultColWidth;\r\n  }\r\n\r\n  return contentWidth;\r\n}\r\n","export enum SortDirection {\r\n  asc = 'asc',\r\n  desc = 'desc'\r\n}\r\n","import { getterForProp } from './column-prop-getters';\r\nimport { SortType } from '../types/sort.type';\r\nimport { SortDirection } from '../types/sort-direction.type';\r\nimport { SortPropDir } from '../types/sort-prop-dir.type';\r\n/**\r\n * Gets the next sort direction\r\n */\r\nexport function nextSortDir(sortType: SortType, current: SortDirection): SortDirection | undefined {\r\n  if (sortType === SortType.single) {\r\n    if (current === SortDirection.asc) {\r\n      return SortDirection.desc;\r\n    } else {\r\n      return SortDirection.asc;\r\n    }\r\n  } else {\r\n    if (!current) {\r\n      return SortDirection.asc;\r\n    } else if (current === SortDirection.asc) {\r\n      return SortDirection.desc;\r\n    } else if (current === SortDirection.desc) {\r\n      return undefined;\r\n    }\r\n    // avoid TS7030: Not all code paths return a value.\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Adapted from fueld-ui on 6/216\r\n * https://github.com/FuelInteractive/fuel-ui/tree/master/src/pipes/OrderBy\r\n */\r\nexport function orderByComparator(a: any, b: any): number {\r\n  if (a === null || typeof a === 'undefined') a = 0;\r\n  if (b === null || typeof b === 'undefined') b = 0;\r\n  if (a instanceof Date && b instanceof Date) {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n  } else if (isNaN(parseFloat(a)) || !isFinite(a) || (isNaN(parseFloat(b)) || !isFinite(b))) {\r\n    // Convert to string in case of a=0 or b=0\r\n    a = String(a);\r\n    b = String(b);\r\n    // Isn't a number so lowercase the string to properly compare\r\n    if (a.toLowerCase() < b.toLowerCase()) return -1;\r\n    if (a.toLowerCase() > b.toLowerCase()) return 1;\r\n  } else {\r\n    // Parse strings as numbers to compare properly\r\n    if (parseFloat(a) < parseFloat(b)) return -1;\r\n    if (parseFloat(a) > parseFloat(b)) return 1;\r\n  }\r\n\r\n  // equal each other\r\n  return 0;\r\n}\r\n\r\n/**\r\n * creates a shallow copy of the `rows` input and returns the sorted copy. this function\r\n * does not sort the `rows` argument in place\r\n */\r\nexport function sortRows(rows: any[], columns: any[], dirs: SortPropDir[]): any[] {\r\n  if (!rows) return [];\r\n  if (!dirs || !dirs.length || !columns) return [...rows];\r\n\r\n  /**\r\n   * record the row ordering of results from prior sort operations (if applicable)\r\n   * this is necessary to guarantee stable sorting behavior\r\n   */\r\n  const rowToIndexMap = new Map<any, number>();\r\n  rows.forEach((row, index) => rowToIndexMap.set(row, index));\r\n\r\n  const temp = [...rows];\r\n  const cols = columns.reduce((obj, col) => {\r\n    if (col.comparator && typeof col.comparator === 'function') {\r\n      obj[col.prop] = col.comparator;\r\n    }\r\n    return obj;\r\n  }, {});\r\n\r\n  // cache valueGetter and compareFn so that they\r\n  // do not need to be looked-up in the sort function body\r\n  const cachedDirs = dirs.map(dir => {\r\n    const prop = dir.prop;\r\n    return {\r\n      prop,\r\n      dir: dir.dir,\r\n      valueGetter: getterForProp(prop),\r\n      compareFn: cols[prop] || orderByComparator\r\n    };\r\n  });\r\n\r\n  return temp.sort(function(rowA: any, rowB: any) {\r\n    for (const cachedDir of cachedDirs) {\r\n      // Get property and valuegetters for column to be sorted\r\n      const { prop, valueGetter } = cachedDir;\r\n      // Get A and B cell values from rows based on properties of the columns\r\n      const propA = valueGetter(rowA, prop);\r\n      const propB = valueGetter(rowB, prop);\r\n\r\n      // Compare function gets five parameters:\r\n      // Two cell values to be compared as propA and propB\r\n      // Two rows corresponding to the cells as rowA and rowB\r\n      // Direction of the sort for this column as SortDirection\r\n      // Compare can be a standard JS comparison function (a,b) => -1|0|1\r\n      // as additional parameters are silently ignored. The whole row and sort\r\n      // direction enable more complex sort logic.\r\n      const comparison =\r\n        cachedDir.dir !== SortDirection.desc\r\n          ? cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir)\r\n          : -cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir);\r\n\r\n      // Don't return 0 yet in case of needing to sort by next property\r\n      if (comparison !== 0) return comparison;\r\n    }\r\n\r\n    if (!(rowToIndexMap.has(rowA) && rowToIndexMap.has(rowB))) return 0;\r\n\r\n    /**\r\n     * all else being equal, preserve original order of the rows (stable sort)\r\n     */\r\n    return rowToIndexMap.get(rowA) < rowToIndexMap.get(rowB) ? -1 : 1;\r\n  });\r\n}\r\n","import {\n  Component,\n  Input,\n  Output,\n  ElementRef,\n  EventEmitter,\n  ViewChild,\n  HostListener,\n  ContentChildren,\n  OnInit,\n  QueryList,\n  AfterViewInit,\n  HostBinding,\n  ContentChild,\n  DoCheck,\n  KeyValueDiffers,\n  KeyValueDiffer,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  SkipSelf,\n  OnDestroy,\n  Optional,\n  Inject\n} from '@angular/core';\n\nimport { DatatableGroupHeaderDirective } from './body/body-group-header.directive';\n\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { INgxDatatableConfig } from '../ngx-datatable.module';\nimport { groupRowsByParents, optionalGetterForProp } from '../utils/tree';\nimport { TableColumn } from '../types/table-column.type';\nimport { setColumnDefaults, translateTemplates } from '../utils/column-helper';\nimport { ColumnMode } from '../types/column-mode.type';\nimport { SelectionType } from '../types/selection.type';\nimport { SortType } from '../types/sort.type';\nimport { ContextmenuType } from '../types/contextmenu.type';\nimport { DataTableColumnDirective } from './columns/column.directive';\nimport { DatatableRowDetailDirective } from './row-detail/row-detail.directive';\nimport { DatatableFooterDirective } from './footer/footer.directive';\nimport { DataTableBodyComponent } from './body/body.component';\nimport { DataTableHeaderComponent } from './header/header.component';\nimport { ScrollbarHelper } from '../services/scrollbar-helper.service';\nimport { ColumnChangesService } from '../services/column-changes.service';\nimport { DimensionsHelper } from '../services/dimensions-helper.service';\nimport { throttleable } from '../utils/throttle';\nimport { forceFillColumnWidths, adjustColumnWidths } from '../utils/math';\nimport { sortRows } from '../utils/sort';\n\n@Component({\n  selector: 'ngx-datatable',\n  templateUrl: './datatable.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: ['./datatable.component.scss'],\n  host: {\n    class: 'ngx-datatable'\n  }\n})\nexport class DatatableComponent implements OnInit, DoCheck, AfterViewInit {\n  /**\n   * Template for the target marker of drag target columns.\n   */\n  @Input() targetMarkerTemplate: any;\n\n  /**\n   * Rows that are displayed in the table.\n   */\n  @Input() set rows(val: any) {\n    this._rows = val;\n\n    if (val) {\n      this._internalRows = [...val];\n    }\n\n    // auto sort on new updates\n    if (!this.externalSorting) {\n      this.sortInternalRows();\n    }\n\n    // auto group by parent on new update\n    this._internalRows = groupRowsByParents(\n      this._internalRows,\n      optionalGetterForProp(this.treeFromRelation),\n      optionalGetterForProp(this.treeToRelation)\n    );\n\n    // recalculate sizes/etc\n    this.recalculate();\n\n    if (this._rows && this._groupRowsBy) {\n      // If a column has been specified in _groupRowsBy created a new array with the data grouped by that row\n      this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n    }\n\n    this.cd.markForCheck();\n  }\n\n  /**\n   * Gets the rows.\n   */\n  get rows(): any {\n    return this._rows;\n  }\n\n  /**\n   * This attribute allows the user to set the name of the column to group the data with\n   */\n  @Input() set groupRowsBy(val: string) {\n    if (val) {\n      this._groupRowsBy = val;\n      if (this._rows && this._groupRowsBy) {\n        // cretes a new array with the data grouped\n        this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n      }\n    }\n  }\n\n  get groupRowsBy() {\n    return this._groupRowsBy;\n  }\n\n  /**\n   * This attribute allows the user to set a grouped array in the following format:\n   *  [\n   *    {groupid=1} [\n   *      {id=1 name=\"test1\"},\n   *      {id=2 name=\"test2\"},\n   *      {id=3 name=\"test3\"}\n   *    ]},\n   *    {groupid=2>[\n   *      {id=4 name=\"test4\"},\n   *      {id=5 name=\"test5\"},\n   *      {id=6 name=\"test6\"}\n   *    ]}\n   *  ]\n   */\n  @Input() groupedRows: any[];\n\n  /**\n   * Columns to be displayed.\n   */\n  @Input() set columns(val: TableColumn[]) {\n    if (val) {\n      this._internalColumns = [...val];\n      setColumnDefaults(this._internalColumns);\n      this.recalculateColumns();\n    }\n\n    this._columns = val;\n  }\n\n  /**\n   * Get the columns.\n   */\n  get columns(): TableColumn[] {\n    return this._columns;\n  }\n\n  /**\n   * List of row objects that should be\n   * represented as selected in the grid.\n   * Default value: `[]`\n   */\n  @Input() selected: any[] = [];\n\n  /**\n   * Enable vertical scrollbars\n   */\n  @Input() scrollbarV: boolean = false;\n\n  /**\n   * Enable horz scrollbars\n   */\n  @Input() scrollbarH: boolean = false;\n\n  /**\n   * The row height; which is necessary\n   * to calculate the height for the lazy rendering.\n   */\n  @Input() rowHeight: number | 'auto' | ((row?: any) => number) = 30;\n\n  /**\n   * Type of column width distribution formula.\n   * Example: flex, force, standard\n   */\n  @Input() columnMode: ColumnMode = ColumnMode.standard;\n\n  /**\n   * The minimum header height in pixels.\n   * Pass a falsey for no header\n   */\n  @Input() headerHeight: any = 30;\n\n  /**\n   * The minimum footer height in pixels.\n   * Pass falsey for no footer\n   */\n  @Input() footerHeight: number = 0;\n\n  /**\n   * If the table should use external paging\n   * otherwise its assumed that all data is preloaded.\n   */\n  @Input() externalPaging: boolean = false;\n\n  /**\n   * If the table should use external sorting or\n   * the built-in basic sorting.\n   */\n  @Input() externalSorting: boolean = false;\n\n  /**\n   * The page size to be shown.\n   * Default value: `undefined`\n   */\n  @Input() set limit(val: number | undefined) {\n    this._limit = val;\n\n    // recalculate sizes/etc\n    this.recalculate();\n  }\n\n  /**\n   * Gets the limit.\n   */\n  get limit(): number | undefined {\n    return this._limit;\n  }\n\n  /**\n   * The total count of all rows.\n   * Default value: `0`\n   */\n  @Input() set count(val: number) {\n    this._count = val;\n\n    // recalculate sizes/etc\n    this.recalculate();\n  }\n\n  /**\n   * Gets the count.\n   */\n  get count(): number {\n    return this._count;\n  }\n\n  /**\n   * The current offset ( page - 1 ) shown.\n   * Default value: `0`\n   */\n  @Input() set offset(val: number) {\n    this._offset = val;\n  }\n  get offset(): number {\n    return Math.max(Math.min(this._offset, Math.ceil(this.rowCount / this.pageSize) - 1), 0);\n  }\n\n  /**\n   * Show the linear loading bar.\n   * Default value: `false`\n   */\n  @Input() loadingIndicator: boolean = false;\n\n  /**\n   * Type of row selection. Options are:\n   *\n   *  - `single`\n   *  - `multi`\n   *  - `checkbox`\n   *  - `multiClick`\n   *  - `cell`\n   *\n   * For no selection pass a `falsey`.\n   * Default value: `undefined`\n   */\n  @Input() selectionType: SelectionType;\n\n  /**\n   * Enable/Disable ability to re-order columns\n   * by dragging them.\n   */\n  @Input() reorderable: boolean = true;\n\n  /**\n   * Swap columns on re-order columns or\n   * move them.\n   */\n  @Input() swapColumns: boolean = true;\n\n  /**\n   * The type of sorting\n   */\n  @Input() sortType: SortType = SortType.single;\n\n  /**\n   * Array of sorted columns by property and type.\n   * Default value: `[]`\n   */\n  @Input() sorts: any[] = [];\n\n  /**\n   * Css class overrides\n   */\n  @Input() cssClasses: any = {\n    sortAscending: 'datatable-icon-up',\n    sortDescending: 'datatable-icon-down',\n    pagerLeftArrow: 'datatable-icon-left',\n    pagerRightArrow: 'datatable-icon-right',\n    pagerPrevious: 'datatable-icon-prev',\n    pagerNext: 'datatable-icon-skip'\n  };\n\n  /**\n   * Message overrides for localization\n   *\n   * emptyMessage     [default] = 'No data to display'\n   * totalMessage     [default] = 'total'\n   * selectedMessage  [default] = 'selected'\n   */\n  @Input() messages: any = {\n    // Message to show when array is presented\n    // but contains no values\n    emptyMessage: 'No data to display',\n\n    // Footer total message\n    totalMessage: 'total',\n\n    // Footer selected message\n    selectedMessage: 'selected'\n  };\n\n  /**\n   * Row specific classes.\n   * Similar implementation to ngClass.\n   *\n   *  [rowClass]=\"'first second'\"\n   *  [rowClass]=\"{ 'first': true, 'second': true, 'third': false }\"\n   */\n  @Input() rowClass: any;\n\n  /**\n   * A boolean/function you can use to check whether you want\n   * to select a particular row based on a criteria. Example:\n   *\n   *    (selection) => {\n   *      return selection !== 'Ethel Price';\n   *    }\n   */\n  @Input() selectCheck: any;\n\n  /**\n   * A function you can use to check whether you want\n   * to show the checkbox for a particular row based on a criteria. Example:\n   *\n   *    (row, column, value) => {\n   *      return row.name !== 'Ethel Price';\n   *    }\n   */\n  @Input() displayCheck: (row: any, column?: any, value?: any) => boolean;\n\n  /**\n   * A boolean you can use to set the detault behaviour of rows and groups\n   * whether they will start expanded or not. If ommited the default is NOT expanded.\n   *\n   */\n  @Input() groupExpansionDefault: boolean = false;\n\n  /**\n   * Property to which you can use for custom tracking of rows.\n   * Example: 'name'\n   */\n  @Input() trackByProp: string;\n\n  /**\n   * Property to which you can use for determining select all\n   * rows on current page or not.\n   *\n   * @memberOf DatatableComponent\n   */\n  @Input() selectAllRowsOnPage = false;\n\n  /**\n   * A flag for row virtualization on / off\n   */\n  @Input() virtualization: boolean = true;\n\n  /**\n   * Tree from relation\n   */\n  @Input() treeFromRelation: string;\n\n  /**\n   * Tree to relation\n   */\n  @Input() treeToRelation: string;\n\n  /**\n   * A flag for switching summary row on / off\n   */\n  @Input() summaryRow: boolean = false;\n\n  /**\n   * A height of summary row\n   */\n  @Input() summaryHeight: number = 30;\n\n  /**\n   * A property holds a summary row position: top/bottom\n   */\n  @Input() summaryPosition: string = 'top';\n\n  /**\n   * Body was scrolled typically in a `scrollbarV:true` scenario.\n   */\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * A cell or row was focused via keyboard or mouse click.\n   */\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * A cell or row was selected.\n   */\n  @Output() select: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Column sort was invoked.\n   */\n  @Output() sort: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * The table was paged either triggered by the pager or the body scroll.\n   */\n  @Output() page: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Columns were re-ordered.\n   */\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Column was resized.\n   */\n  @Output() resize: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * The context menu was invoked on the table.\n   * type indicates whether the header or the body was clicked.\n   * content contains either the column or the row that was clicked.\n   */\n  @Output() tableContextmenu = new EventEmitter<{ event: MouseEvent; type: ContextmenuType; content: any }>(false);\n\n  /**\n   * A row was expanded ot collapsed for tree\n   */\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * CSS class applied if the header height if fixed height.\n   */\n  @HostBinding('class.fixed-header')\n  get isFixedHeader(): boolean {\n    const headerHeight: number | string = this.headerHeight;\n    return typeof headerHeight === 'string' ? <string>headerHeight !== 'auto' : true;\n  }\n\n  /**\n   * CSS class applied to the root element if\n   * the row heights are fixed heights.\n   */\n  @HostBinding('class.fixed-row')\n  get isFixedRow(): boolean {\n    return this.rowHeight !== 'auto';\n  }\n\n  /**\n   * CSS class applied to root element if\n   * vertical scrolling is enabled.\n   */\n  @HostBinding('class.scroll-vertical')\n  get isVertScroll(): boolean {\n    return this.scrollbarV;\n  }\n\n  /**\n   * CSS class applied to root element if\n   * virtualization is enabled.\n   */\n  @HostBinding('class.virtualized')\n  get isVirtualized(): boolean {\n    return this.virtualization;\n  }\n\n  /**\n   * CSS class applied to the root element\n   * if the horziontal scrolling is enabled.\n   */\n  @HostBinding('class.scroll-horz')\n  get isHorScroll(): boolean {\n    return this.scrollbarH;\n  }\n\n  /**\n   * CSS class applied to root element is selectable.\n   */\n  @HostBinding('class.selectable')\n  get isSelectable(): boolean {\n    return this.selectionType !== undefined;\n  }\n\n  /**\n   * CSS class applied to root is checkbox selection.\n   */\n  @HostBinding('class.checkbox-selection')\n  get isCheckboxSelection(): boolean {\n    return this.selectionType === SelectionType.checkbox;\n  }\n\n  /**\n   * CSS class applied to root if cell selection.\n   */\n  @HostBinding('class.cell-selection')\n  get isCellSelection(): boolean {\n    return this.selectionType === SelectionType.cell;\n  }\n\n  /**\n   * CSS class applied to root if single select.\n   */\n  @HostBinding('class.single-selection')\n  get isSingleSelection(): boolean {\n    return this.selectionType === SelectionType.single;\n  }\n\n  /**\n   * CSS class added to root element if mulit select\n   */\n  @HostBinding('class.multi-selection')\n  get isMultiSelection(): boolean {\n    return this.selectionType === SelectionType.multi;\n  }\n\n  /**\n   * CSS class added to root element if mulit click select\n   */\n  @HostBinding('class.multi-click-selection')\n  get isMultiClickSelection(): boolean {\n    return this.selectionType === SelectionType.multiClick;\n  }\n\n  /**\n   * Column templates gathered from `ContentChildren`\n   * if described in your markup.\n   */\n  @ContentChildren(DataTableColumnDirective)\n  set columnTemplates(val: QueryList<DataTableColumnDirective>) {\n    this._columnTemplates = val;\n    this.translateColumns(val);\n  }\n\n  /**\n   * Returns the column templates.\n   */\n  get columnTemplates(): QueryList<DataTableColumnDirective> {\n    return this._columnTemplates;\n  }\n\n  /**\n   * Row Detail templates gathered from the ContentChild\n   */\n  @ContentChild(DatatableRowDetailDirective, { static: false })\n  rowDetail: DatatableRowDetailDirective;\n\n  /**\n   * Group Header templates gathered from the ContentChild\n   */\n  @ContentChild(DatatableGroupHeaderDirective, { static: false })\n  groupHeader: DatatableGroupHeaderDirective;\n\n  /**\n   * Footer template gathered from the ContentChild\n   */\n  @ContentChild(DatatableFooterDirective, { static: false })\n  footer: DatatableFooterDirective;\n\n  /**\n   * Reference to the body component for manually\n   * invoking functions on the body.\n   */\n  @ViewChild(DataTableBodyComponent, { static: false })\n  bodyComponent: DataTableBodyComponent;\n\n  /**\n   * Reference to the header component for manually\n   * invoking functions on the header.\n   *\n   * @memberOf DatatableComponent\n   */\n  @ViewChild(DataTableHeaderComponent, { static: false })\n  headerComponent: DataTableHeaderComponent;\n\n  /**\n   * Returns if all rows are selected.\n   */\n  get allRowsSelected(): boolean {\n    let allRowsSelected = this.rows && this.selected && this.selected.length === this.rows.length;\n\n    if (this.selectAllRowsOnPage) {\n      const indexes = this.bodyComponent.indexes;\n      const rowsOnPage = indexes.last - indexes.first;\n      allRowsSelected = this.selected.length === rowsOnPage;\n    }\n\n    return this.selected && this.rows && this.rows.length !== 0 && allRowsSelected;\n  }\n\n  element: HTMLElement;\n  _innerWidth: number;\n  pageSize: number;\n  bodyHeight: number;\n  rowCount: number = 0;\n  rowDiffer: KeyValueDiffer<{}, {}>;\n\n  _offsetX = new BehaviorSubject(0);\n  _limit: number | undefined;\n  _count: number = 0;\n  _offset: number = 0;\n  _rows: any[];\n  _groupRowsBy: string;\n  _internalRows: any[];\n  _internalColumns: TableColumn[];\n  _columns: TableColumn[];\n  _columnTemplates: QueryList<DataTableColumnDirective>;\n  _subscriptions: Subscription[] = [];\n\n  constructor(\n    @SkipSelf() private scrollbarHelper: ScrollbarHelper,\n    @SkipSelf() private dimensionsHelper: DimensionsHelper,\n    private cd: ChangeDetectorRef,\n    element: ElementRef,\n    differs: KeyValueDiffers,\n    private columnChangesService: ColumnChangesService,\n    @Optional() @Inject('configuration') private configuration: INgxDatatableConfig\n  ) {\n    // get ref to elm for measuring\n    this.element = element.nativeElement;\n    this.rowDiffer = differs.find({}).create();\n\n    // apply global settings from Module.forRoot\n    if (this.configuration && this.configuration.messages) {\n      this.messages = { ...this.configuration.messages };\n    }\n  }\n\n  /**\n   * Lifecycle hook that is called after data-bound\n   * properties of a directive are initialized.\n   */\n  ngOnInit(): void {\n    // need to call this immediatly to size\n    // if the table is hidden the visibility\n    // listener will invoke this itself upon show\n    this.recalculate();\n  }\n\n  /**\n   * Lifecycle hook that is called after a component's\n   * view has been fully initialized.\n   */\n  ngAfterViewInit(): void {\n    if (!this.externalSorting) {\n      this.sortInternalRows();\n    }\n\n    // this has to be done to prevent the change detection\n    // tree from freaking out because we are readjusting\n    if (typeof requestAnimationFrame === 'undefined') {\n      return;\n    }\n\n    requestAnimationFrame(() => {\n      this.recalculate();\n\n      // emit page for virtual server-side kickoff\n      if (this.externalPaging && this.scrollbarV) {\n        this.page.emit({\n          count: this.count,\n          pageSize: this.pageSize,\n          limit: this.limit,\n          offset: 0\n        });\n      }\n    });\n  }\n\n  /**\n   * Lifecycle hook that is called after a component's\n   * content has been fully initialized.\n   */\n  ngAfterContentInit() {\n    this.columnTemplates.changes.subscribe(v => this.translateColumns(v));\n    this.listenForColumnInputChanges();\n  }\n\n  /**\n   * This will be used when displaying or selecting rows.\n   * when tracking/comparing them, we'll use the value of this fn,\n   *\n   * (`fn(x) === fn(y)` instead of `x === y`)\n   */\n  @Input() rowIdentity: (x: any) => any = (x: any) => {\n    if (this._groupRowsBy) {\n      // each group in groupedRows are stored as {key, value: [rows]},\n      // where key is the groupRowsBy index\n      return x.key;\n    } else {\n      return x;\n    }\n  };\n  \n\n  /**\n   * Translates the templates to the column objects\n   */\n  translateColumns(val: any) {\n    if (val) {\n      const arr = val.toArray();\n      if (arr.length) {\n        this._internalColumns = translateTemplates(arr);\n        setColumnDefaults(this._internalColumns);\n        this.recalculateColumns();\n        this.sortInternalRows();\n        this.cd.markForCheck();\n      }\n    }\n  }\n\n  /**\n   * Creates a map with the data grouped by the user choice of grouping index\n   *\n   * @param originalArray the original array passed via parameter\n   * @param groupByIndex  the index of the column to group the data by\n   */\n  groupArrayBy(originalArray: any, groupBy: any) {\n    // create a map to hold groups with their corresponding results\n    const map = new Map();\n    let i: number = 0;\n\n    originalArray.forEach((item: any) => {\n      const key = item[groupBy];\n      if (!map.has(key)) {\n        map.set(key, [item]);\n      } else {\n        map.get(key).push(item);\n      }\n      i++;\n    });\n\n    const addGroup = (key: any, value: any) => {\n      return { key, value };\n    };\n\n    // convert map back to a simple array of objects\n    return Array.from(map, x => addGroup(x[0], x[1]));\n  }\n\n  /*\n   * Lifecycle hook that is called when Angular dirty checks a directive.\n   */\n  ngDoCheck(): void {\n    if (this.rowDiffer.diff(this.rows)) {\n      if (!this.externalSorting) {\n        this.sortInternalRows();\n      } else {\n        this._internalRows = [...this.rows];\n      }\n\n      // auto group by parent on new update\n      this._internalRows = groupRowsByParents(\n        this._internalRows,\n        optionalGetterForProp(this.treeFromRelation),\n        optionalGetterForProp(this.treeToRelation)\n      );\n\n      this.recalculatePages();\n      this.cd.markForCheck();\n    }\n  }\n\n  /**\n   * Recalc's the sizes of the grid.\n   *\n   * Updated automatically on changes to:\n   *\n   *  - Columns\n   *  - Rows\n   *  - Paging related\n   *\n   * Also can be manually invoked or upon window resize.\n   */\n  recalculate(): void {\n    this.recalculateDims();\n    this.recalculateColumns();\n  }\n\n  /**\n   * Window resize handler to update sizes.\n   */\n  @HostListener('window:resize')\n  @throttleable(5)\n  onWindowResize(): void {\n    this.recalculate();\n  }\n\n  /**\n   * Recalulcates the column widths based on column width\n   * distribution mode and scrollbar offsets.\n   */\n  recalculateColumns(\n    columns: any[] = this._internalColumns,\n    forceIdx: number = -1,\n    allowBleed: boolean = this.scrollbarH\n  ): any[] | undefined {\n    if (!columns) return undefined;\n\n    let width = this._innerWidth;\n    if (this.scrollbarV) {\n      width = width - this.scrollbarHelper.width;\n    }\n\n    if (this.columnMode === ColumnMode.force) {\n      forceFillColumnWidths(columns, width, forceIdx, allowBleed);\n    } else if (this.columnMode === ColumnMode.flex) {\n      adjustColumnWidths(columns, width);\n    }\n\n    return columns;\n  }\n\n  /**\n   * Recalculates the dimensions of the table size.\n   * Internally calls the page size and row count calcs too.\n   *\n   */\n  recalculateDims(): void {\n    const dims = this.dimensionsHelper.getDimensions(this.element);\n    this._innerWidth = Math.floor(dims.width);\n\n    if (this.scrollbarV) {\n      let height = dims.height;\n      if (this.headerHeight) height = height - this.headerHeight;\n      if (this.footerHeight) height = height - this.footerHeight;\n      this.bodyHeight = height;\n    }\n\n    this.recalculatePages();\n  }\n\n  /**\n   * Recalculates the pages after a update.\n   */\n  recalculatePages(): void {\n    this.pageSize = this.calcPageSize();\n    this.rowCount = this.calcRowCount();\n  }\n\n  /**\n   * Body triggered a page event.\n   */\n  onBodyPage({ offset }: any): void {\n    // Avoid pagination caming from body events like scroll when the table\n    // has no virtualization and the external paging is enable.\n    // This means, let's the developer handle pagination by my him(her) self\n    if (this.externalPaging && !this.virtualization) {\n      return;\n    }\n\n    this.offset = offset;\n\n    this.page.emit({\n      count: this.count,\n      pageSize: this.pageSize,\n      limit: this.limit,\n      offset: this.offset\n    });\n  }\n\n  /**\n   * The body triggered a scroll event.\n   */\n  onBodyScroll(event: MouseEvent): void {\n    this._offsetX.next(event.offsetX);\n    this.scroll.emit(event);\n    this.cd.detectChanges();\n  }\n\n  /**\n   * The footer triggered a page event.\n   */\n  onFooterPage(event: any) {\n    this.offset = event.page - 1;\n    this.bodyComponent.updateOffsetY(this.offset);\n\n    this.page.emit({\n      count: this.count,\n      pageSize: this.pageSize,\n      limit: this.limit,\n      offset: this.offset\n    });\n\n    if (this.selectAllRowsOnPage) {\n      this.selected = [];\n      this.select.emit({\n        selected: this.selected\n      });\n    }\n  }\n\n  /**\n   * Recalculates the sizes of the page\n   */\n  calcPageSize(val: any[] = this.rows): number {\n    // Keep the page size constant even if the row has been expanded.\n    // This is because an expanded row is still considered to be a child of\n    // the original row.  Hence calculation would use rowHeight only.\n    if (this.scrollbarV && this.virtualization) {\n      const size = Math.ceil(this.bodyHeight / (this.rowHeight as number));\n      return Math.max(size, 0);\n    }\n\n    // if limit is passed, we are paging\n    if (this.limit !== undefined) {\n      return this.limit;\n    }\n\n    // otherwise use row length\n    if (val) {\n      return val.length;\n    }\n\n    // other empty :(\n    return 0;\n  }\n\n  /**\n   * Calculates the row count.\n   */\n  calcRowCount(val: any[] = this.rows): number {\n    if (!this.externalPaging) {\n      if (!val) return 0;\n\n      if (this.groupedRows) {\n        return this.groupedRows.length;\n      } else if (this.treeFromRelation != null && this.treeToRelation != null) {\n        return this._internalRows.length;\n      } else {\n        return val.length;\n      }\n    }\n\n    return this.count;\n  }\n\n  /**\n   * The header triggered a contextmenu event.\n   */\n  onColumnContextmenu({ event, column }: any): void {\n    this.tableContextmenu.emit({ event, type: ContextmenuType.header, content: column });\n  }\n\n  /**\n   * The body triggered a contextmenu event.\n   */\n  onRowContextmenu({ event, row }: any): void {\n    this.tableContextmenu.emit({ event, type: ContextmenuType.body, content: row });\n  }\n\n  /**\n   * The header triggered a column resize event.\n   */\n  onColumnResize({ column, newValue }: any): void {\n    /* Safari/iOS 10.2 workaround */\n    if (column === undefined) {\n      return;\n    }\n\n    let idx: number;\n    const cols = this._internalColumns.map((c, i) => {\n      c = { ...c };\n\n      if (c.$$id === column.$$id) {\n        idx = i;\n        c.width = newValue;\n\n        // set this so we can force the column\n        // width distribution to be to this value\n        c.$$oldWidth = newValue;\n      }\n\n      return c;\n    });\n\n    this.recalculateColumns(cols, idx);\n    this._internalColumns = cols;\n\n    this.resize.emit({\n      column,\n      newValue\n    });\n  }\n\n  /**\n   * The header triggered a column re-order event.\n   */\n  onColumnReorder({ column, newValue, prevValue }: any): void {\n    const cols = this._internalColumns.map(c => {\n      return { ...c };\n    });\n\n    if (this.swapColumns) {\n      const prevCol = cols[newValue];\n      cols[newValue] = column;\n      cols[prevValue] = prevCol;\n    } else {\n      if (newValue > prevValue) {\n        const movedCol = cols[prevValue];\n        for (let i = prevValue; i < newValue; i++) {\n          cols[i] = cols[i + 1];\n        }\n        cols[newValue] = movedCol;\n      } else {\n        const movedCol = cols[prevValue];\n        for (let i = prevValue; i > newValue; i--) {\n          cols[i] = cols[i - 1];\n        }\n        cols[newValue] = movedCol;\n      }\n    }\n\n    this._internalColumns = cols;\n\n    this.reorder.emit({\n      column,\n      newValue,\n      prevValue\n    });\n  }\n\n  /**\n   * The header triggered a column sort event.\n   */\n  onColumnSort(event: any): void {\n    // clean selected rows\n    if (this.selectAllRowsOnPage) {\n      this.selected = [];\n      this.select.emit({\n        selected: this.selected\n      });\n    }\n\n    this.sorts = event.sorts;\n\n    // this could be optimized better since it will resort\n    // the rows again on the 'push' detection...\n    if (this.externalSorting === false) {\n      // don't use normal setter so we don't resort\n      this.sortInternalRows();\n    }\n\n    // auto group by parent on new update\n    this._internalRows = groupRowsByParents(\n      this._internalRows,\n      optionalGetterForProp(this.treeFromRelation),\n      optionalGetterForProp(this.treeToRelation)\n    );\n\n    // Always go to first page when sorting to see the newly sorted data\n    this.offset = 0;\n    this.bodyComponent.updateOffsetY(this.offset);\n    this.sort.emit(event);\n  }\n\n  /**\n   * Toggle all row selection\n   */\n  onHeaderSelect(event: any): void {\n    if (this.selectAllRowsOnPage) {\n      // before we splice, chk if we currently have all selected\n      const first = this.bodyComponent.indexes.first;\n      const last = this.bodyComponent.indexes.last;\n      const allSelected = this.selected.length === last - first;\n\n      // remove all existing either way\n      this.selected = [];\n\n      // do the opposite here\n      if (!allSelected) {\n        this.selected.push(...this._internalRows.slice(first, last));\n      }\n    } else {\n      // before we splice, chk if we currently have all selected\n      const allSelected = this.selected.length === this.rows.length;\n      // remove all existing either way\n      this.selected = [];\n      // do the opposite here\n      if (!allSelected) {\n        this.selected.push(...this.rows);\n      }\n    }\n\n    this.select.emit({\n      selected: this.selected\n    });\n  }\n\n  /**\n   * A row was selected from body\n   */\n  onBodySelect(event: any): void {\n    this.select.emit(event);\n  }\n\n  /**\n   * A row was expanded or collapsed for tree\n   */\n  onTreeAction(event: any) {\n    const row = event.row;\n    // TODO: For duplicated items this will not work\n    const rowIndex = this._rows.findIndex(r => r[this.treeToRelation] === event.row[this.treeToRelation]);\n    this.treeAction.emit({ row, rowIndex });\n  }\n\n  ngOnDestroy() {\n    this._subscriptions.forEach(subscription => subscription.unsubscribe());\n  }\n\n  /**\n   * listen for changes to input bindings of all DataTableColumnDirective and\n   * trigger the columnTemplates.changes observable to emit\n   */\n  private listenForColumnInputChanges(): void {\n    this._subscriptions.push(\n      this.columnChangesService.columnInputChanges$.subscribe(() => {\n        if (this.columnTemplates) {\n          this.columnTemplates.notifyOnChanges();\n        }\n      })\n    );\n  }\n\n  private sortInternalRows(): void {\n    this._internalRows = sortRows(this._internalRows, this._internalColumns, this.sorts);\n  }\n}\n","import {\r\n  Component,\r\n  Input,\r\n  EventEmitter,\r\n  Output,\r\n  HostBinding,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { MouseEvent } from '../../events';\r\nimport { SortType } from '../../types/sort.type';\r\nimport { SelectionType } from '../../types/selection.type';\r\nimport { TableColumn } from '../../types/table-column.type';\r\nimport { nextSortDir } from '../../utils/sort';\r\nimport { SortDirection } from '../../types/sort-direction.type';\r\n\r\n@Component({\r\n  selector: 'datatable-header-cell',\r\n  template: `\r\n    <div class=\"datatable-header-cell-template-wrap\">\r\n      <ng-template\r\n        *ngIf=\"isTarget\"\r\n        [ngTemplateOutlet]=\"targetMarkerTemplate\"\r\n        [ngTemplateOutletContext]=\"targetMarkerContext\"\r\n      >\r\n      </ng-template>\r\n      <label *ngIf=\"isCheckboxable\" class=\"datatable-checkbox\">\r\n        <input type=\"checkbox\" [checked]=\"allRowsSelected\" (change)=\"select.emit(!allRowsSelected)\" />\r\n      </label>\r\n      <span *ngIf=\"!column.headerTemplate\" class=\"datatable-header-cell-wrapper\">\r\n        <span class=\"datatable-header-cell-label draggable\" (click)=\"onSort()\" [innerHTML]=\"name\"> </span>\r\n      </span>\r\n      <ng-template\r\n        *ngIf=\"column.headerTemplate\"\r\n        [ngTemplateOutlet]=\"column.headerTemplate\"\r\n        [ngTemplateOutletContext]=\"cellContext\"\r\n      >\r\n      </ng-template>\r\n      <span (click)=\"onSort()\" [class]=\"sortClass\"> </span>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'datatable-header-cell'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTableHeaderCellComponent {\r\n  @Input() sortType: SortType;\r\n  @Input() sortAscendingIcon: string;\r\n  @Input() sortDescendingIcon: string;\r\n\r\n  @Input() isTarget: boolean;\r\n  @Input() targetMarkerTemplate: any;\r\n  @Input() targetMarkerContext: any;\r\n\r\n  _allRowsSelected: boolean;\r\n\r\n  @Input() set allRowsSelected(value) {\r\n    this._allRowsSelected = value;\r\n    this.cellContext.allRowsSelected = value;\r\n  }\r\n  get allRowsSelected() {\r\n    return this._allRowsSelected;\r\n  }\r\n\r\n  @Input() selectionType: SelectionType;\r\n\r\n  @Input() set column(column: TableColumn) {\r\n    this._column = column;\r\n    this.cellContext.column = column;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get column(): TableColumn {\r\n    return this._column;\r\n  }\r\n\r\n  @HostBinding('style.height.px')\r\n  @Input()\r\n  headerHeight: number;\r\n\r\n  @Input() set sorts(val: any[]) {\r\n    this._sorts = val;\r\n    this.sortDir = this.calcSortDir(val);\r\n    this.cellContext.sortDir = this.sortDir;\r\n    this.sortClass = this.calcSortClass(this.sortDir);\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get sorts(): any[] {\r\n    return this._sorts;\r\n  }\r\n\r\n  @Output() sort: EventEmitter<any> = new EventEmitter();\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() columnContextmenu = new EventEmitter<{ event: MouseEvent; column: any }>(false);\r\n\r\n  @HostBinding('class')\r\n  get columnCssClasses(): any {\r\n    let cls = 'datatable-header-cell';\r\n\r\n    if (this.column.sortable) cls += ' sortable';\r\n    if (this.column.resizeable) cls += ' resizeable';\r\n    if (this.column.headerClass) {\r\n      if (typeof this.column.headerClass === 'string') {\r\n        cls += ' ' + this.column.headerClass;\r\n      } else if (typeof this.column.headerClass === 'function') {\r\n        const res = this.column.headerClass({\r\n          column: this.column\r\n        });\r\n\r\n        if (typeof res === 'string') {\r\n          cls += res;\r\n        } else if (typeof res === 'object') {\r\n          const keys = Object.keys(res);\r\n          for (const k of keys) {\r\n            if (res[k] === true) cls += ` ${k}`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const sortDir = this.sortDir;\r\n    if (sortDir) {\r\n      cls += ` sort-active sort-${sortDir}`;\r\n    }\r\n\r\n    return cls;\r\n  }\r\n\r\n  @HostBinding('attr.title')\r\n  get name(): string {\r\n    // guaranteed to have a value by setColumnDefaults() in column-helper.ts\r\n    return this.column.headerTemplate === undefined ? this.column.name : undefined;\r\n  }\r\n\r\n  @HostBinding('style.minWidth.px')\r\n  get minWidth(): number {\r\n    return this.column.minWidth;\r\n  }\r\n\r\n  @HostBinding('style.maxWidth.px')\r\n  get maxWidth(): number {\r\n    return this.column.maxWidth;\r\n  }\r\n\r\n  @HostBinding('style.width.px')\r\n  get width(): number {\r\n    return this.column.width;\r\n  }\r\n\r\n  get isCheckboxable(): boolean {\r\n    return this.column.checkboxable && this.column.headerCheckboxable && this.selectionType === SelectionType.checkbox;\r\n  }\r\n\r\n  sortFn = this.onSort.bind(this);\r\n  sortClass: string;\r\n  sortDir: SortDirection;\r\n  selectFn = this.select.emit.bind(this.select);\r\n\r\n  cellContext: any = {\r\n    column: this.column,\r\n    sortDir: this.sortDir,\r\n    sortFn: this.sortFn,\r\n    allRowsSelected: this.allRowsSelected,\r\n    selectFn: this.selectFn\r\n  };\r\n\r\n  private _column: TableColumn;\r\n  private _sorts: any[];\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n\r\n  @HostListener('contextmenu', ['$event'])\r\n  onContextmenu($event: MouseEvent): void {\r\n    this.columnContextmenu.emit({ event: $event, column: this.column });\r\n  }\r\n\r\n  calcSortDir(sorts: any[]): any {\r\n    if (sorts && this.column) {\r\n      const sort = sorts.find((s: any) => {\r\n        return s.prop === this.column.prop;\r\n      });\r\n\r\n      if (sort) return sort.dir;\r\n    }\r\n  }\r\n\r\n  onSort(): void {\r\n    if (!this.column.sortable) return;\r\n\r\n    const newValue = nextSortDir(this.sortType, this.sortDir);\r\n    this.sort.emit({\r\n      column: this.column,\r\n      prevValue: this.sortDir,\r\n      newValue\r\n    });\r\n  }\r\n\r\n  calcSortClass(sortDir: SortDirection): string {\r\n    if (sortDir === SortDirection.asc) {\r\n      return `sort-btn sort-asc ${this.sortAscendingIcon}`;\r\n    } else if (sortDir === SortDirection.desc) {\r\n      return `sort-btn sort-desc ${this.sortDescendingIcon}`;\r\n    } else {\r\n      return `sort-btn`;\r\n    }\r\n  }\r\n}\r\n","import { Component, Output, EventEmitter, ChangeDetectionStrategy, Input, TemplateRef } from '@angular/core';\r\nimport { DatatableFooterDirective } from './footer.directive';\r\n@Component({\r\n  selector: 'datatable-footer',\r\n  template: `\r\n    <div\r\n      class=\"datatable-footer-inner\"\r\n      [ngClass]=\"{ 'selected-count': selectedMessage }\"\r\n      [style.height.px]=\"footerHeight\"\r\n    >\r\n      <ng-template\r\n        *ngIf=\"footerTemplate\"\r\n        [ngTemplateOutlet]=\"footerTemplate.template\"\r\n        [ngTemplateOutletContext]=\"{\r\n          rowCount: rowCount,\r\n          pageSize: pageSize,\r\n          selectedCount: selectedCount,\r\n          curPage: curPage,\r\n          offset: offset\r\n        }\"\r\n      >\r\n      </ng-template>\r\n      <div class=\"page-count\" *ngIf=\"!footerTemplate\">\r\n        <span *ngIf=\"selectedMessage\"> {{ selectedCount?.toLocaleString() }} {{ selectedMessage }} / </span>\r\n        {{ rowCount?.toLocaleString() }} {{ totalMessage }}\r\n      </div>\r\n      <datatable-pager\r\n        *ngIf=\"!footerTemplate\"\r\n        [pagerLeftArrowIcon]=\"pagerLeftArrowIcon\"\r\n        [pagerRightArrowIcon]=\"pagerRightArrowIcon\"\r\n        [pagerPreviousIcon]=\"pagerPreviousIcon\"\r\n        [pagerNextIcon]=\"pagerNextIcon\"\r\n        [page]=\"curPage\"\r\n        [size]=\"pageSize\"\r\n        [count]=\"rowCount\"\r\n        [hidden]=\"!isVisible\"\r\n        (change)=\"page.emit($event)\"\r\n      >\r\n      </datatable-pager>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'datatable-footer'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTableFooterComponent {\r\n  @Input() footerHeight: number;\r\n  @Input() rowCount: number;\r\n  @Input() pageSize: number;\r\n  @Input() offset: number;\r\n  @Input() pagerLeftArrowIcon: string;\r\n  @Input() pagerRightArrowIcon: string;\r\n  @Input() pagerPreviousIcon: string;\r\n  @Input() pagerNextIcon: string;\r\n  @Input() totalMessage: string;\r\n  @Input() footerTemplate: DatatableFooterDirective;\r\n\r\n  @Input() selectedCount: number = 0;\r\n  @Input() selectedMessage: string | boolean;\r\n\r\n  @Output() page: EventEmitter<any> = new EventEmitter();\r\n\r\n  get isVisible(): boolean {\r\n    return this.rowCount / this.pageSize > 1;\r\n  }\r\n\r\n  get curPage(): number {\r\n    return this.offset + 1;\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'datatable-pager',\r\n  template: `\r\n    <ul class=\"pager\">\r\n      <li [class.disabled]=\"!canPrevious()\">\r\n        <a role=\"button\" aria-label=\"go to first page\" href=\"javascript:void(0)\" (click)=\"selectPage(1)\">\r\n          <i class=\"{{ pagerPreviousIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n      <li [class.disabled]=\"!canPrevious()\">\r\n        <a role=\"button\" aria-label=\"go to previous page\" href=\"javascript:void(0)\" (click)=\"prevPage()\">\r\n          <i class=\"{{ pagerLeftArrowIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n      <li\r\n        role=\"button\"\r\n        [attr.aria-label]=\"'page ' + pg.number\"\r\n        class=\"pages\"\r\n        *ngFor=\"let pg of pages\"\r\n        [class.active]=\"pg.number === page\"\r\n      >\r\n        <a href=\"javascript:void(0)\" (click)=\"selectPage(pg.number)\">\r\n          {{ pg.text }}\r\n        </a>\r\n      </li>\r\n      <li [class.disabled]=\"!canNext()\">\r\n        <a role=\"button\" aria-label=\"go to next page\" href=\"javascript:void(0)\" (click)=\"nextPage()\">\r\n          <i class=\"{{ pagerRightArrowIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n      <li [class.disabled]=\"!canNext()\">\r\n        <a role=\"button\" aria-label=\"go to last page\" href=\"javascript:void(0)\" (click)=\"selectPage(totalPages)\">\r\n          <i class=\"{{ pagerNextIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  `,\r\n  host: {\r\n    class: 'datatable-pager'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTablePagerComponent {\r\n  @Input() pagerLeftArrowIcon: string;\r\n  @Input() pagerRightArrowIcon: string;\r\n  @Input() pagerPreviousIcon: string;\r\n  @Input() pagerNextIcon: string;\r\n\r\n  @Input()\r\n  set size(val: number) {\r\n    this._size = val;\r\n    this.pages = this.calcPages();\r\n  }\r\n\r\n  get size(): number {\r\n    return this._size;\r\n  }\r\n\r\n  @Input()\r\n  set count(val: number) {\r\n    this._count = val;\r\n    this.pages = this.calcPages();\r\n  }\r\n\r\n  get count(): number {\r\n    return this._count;\r\n  }\r\n\r\n  @Input()\r\n  set page(val: number) {\r\n    this._page = val;\r\n    this.pages = this.calcPages();\r\n  }\r\n\r\n  get page(): number {\r\n    return this._page;\r\n  }\r\n\r\n  get totalPages(): number {\r\n    const count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);\r\n    return Math.max(count || 0, 1);\r\n  }\r\n\r\n  @Output() change: EventEmitter<any> = new EventEmitter();\r\n\r\n  _count: number = 0;\r\n  _page: number = 1;\r\n  _size: number = 0;\r\n  pages: any;\r\n\r\n  canPrevious(): boolean {\r\n    return this.page > 1;\r\n  }\r\n\r\n  canNext(): boolean {\r\n    return this.page < this.totalPages;\r\n  }\r\n\r\n  prevPage(): void {\r\n    this.selectPage(this.page - 1);\r\n  }\r\n\r\n  nextPage(): void {\r\n    this.selectPage(this.page + 1);\r\n  }\r\n\r\n  selectPage(page: number): void {\r\n    if (page > 0 && page <= this.totalPages && page !== this.page) {\r\n      this.page = page;\r\n\r\n      this.change.emit({\r\n        page\r\n      });\r\n    }\r\n  }\r\n\r\n  calcPages(page?: number): any[] {\r\n    const pages = [];\r\n    let startPage = 1;\r\n    let endPage = this.totalPages;\r\n    const maxSize = 5;\r\n    const isMaxSized = maxSize < this.totalPages;\r\n\r\n    page = page || this.page;\r\n\r\n    if (isMaxSized) {\r\n      startPage = page - Math.floor(maxSize / 2);\r\n      endPage = page + Math.floor(maxSize / 2);\r\n\r\n      if (startPage < 1) {\r\n        startPage = 1;\r\n        endPage = Math.min(startPage + maxSize - 1, this.totalPages);\r\n      } else if (endPage > this.totalPages) {\r\n        startPage = Math.max(this.totalPages - maxSize + 1, 1);\r\n        endPage = this.totalPages;\r\n      }\r\n    }\r\n\r\n    for (let num = startPage; num <= endPage; num++) {\r\n      pages.push({\r\n        number: num,\r\n        text: <string>(<any>num)\r\n      });\r\n    }\r\n\r\n    return pages;\r\n  }\r\n}\r\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'datatable-progress',\r\n  template: `\r\n    <div class=\"progress-linear\" role=\"progressbar\">\r\n      <div class=\"container\">\r\n        <div class=\"bar\"></div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ProgressBarComponent {}\r\n","export enum Keys {\r\n  up = 38,\r\n  down = 40,\r\n  return = 13,\r\n  escape = 27,\r\n  left = 37,\r\n  right = 39\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  HostBinding,\r\n  ElementRef,\r\n  Output,\r\n  KeyValueDiffers,\r\n  KeyValueDiffer,\r\n  EventEmitter,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  DoCheck,\r\n  SkipSelf\r\n} from '@angular/core';\r\n\r\nimport { TreeStatus } from './body-cell.component';\r\nimport { columnsByPin, columnGroupWidths, columnsByPinArr } from '../../utils/column';\r\nimport { Keys } from '../../utils/keys';\r\nimport { ScrollbarHelper } from '../../services/scrollbar-helper.service';\r\nimport { translateXY } from '../../utils/translate';\r\n\r\n@Component({\r\n  selector: 'datatable-body-row',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div\r\n      *ngFor=\"let colGroup of _columnsByPin; let i = index; trackBy: trackByGroups\"\r\n      class=\"datatable-row-{{ colGroup.type }} datatable-row-group\"\r\n      [ngStyle]=\"_groupStyles[colGroup.type]\"\r\n    >\r\n      <datatable-body-cell\r\n        *ngFor=\"let column of colGroup.columns; let ii = index; trackBy: columnTrackingFn\"\r\n        tabindex=\"-1\"\r\n        [row]=\"row\"\r\n        [group]=\"group\"\r\n        [expanded]=\"expanded\"\r\n        [isSelected]=\"isSelected\"\r\n        [rowIndex]=\"rowIndex\"\r\n        [column]=\"column\"\r\n        [rowHeight]=\"rowHeight\"\r\n        [displayCheck]=\"displayCheck\"\r\n        [treeStatus]=\"treeStatus\"\r\n        (activate)=\"onActivate($event, ii)\"\r\n        (treeAction)=\"onTreeAction()\"\r\n      >\r\n      </datatable-body-cell>\r\n    </div>\r\n  `\r\n})\r\nexport class DataTableBodyRowComponent implements DoCheck {\r\n  @Input() set columns(val: any[]) {\r\n    this._columns = val;\r\n    this.recalculateColumns(val);\r\n    this.buildStylesByGroup();\r\n  }\r\n\r\n  get columns(): any[] {\r\n    return this._columns;\r\n  }\r\n\r\n  @Input() set innerWidth(val: number) {\r\n    if (this._columns) {\r\n      const colByPin = columnsByPin(this._columns);\r\n      this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\r\n    }\r\n\r\n    this._innerWidth = val;\r\n    this.recalculateColumns();\r\n    this.buildStylesByGroup();\r\n  }\r\n\r\n  get innerWidth(): number {\r\n    return this._innerWidth;\r\n  }\r\n\r\n  @Input() expanded: boolean;\r\n  @Input() rowClass: any;\r\n  @Input() row: any;\r\n  @Input() group: any;\r\n  @Input() isSelected: boolean;\r\n  @Input() rowIndex: number;\r\n  @Input() displayCheck: any;\r\n  @Input() treeStatus: TreeStatus = 'collapsed';\r\n\r\n  @Input()\r\n  set offsetX(val: number) {\r\n    this._offsetX = val;\r\n    this.buildStylesByGroup();\r\n  }\r\n  get offsetX() {\r\n    return this._offsetX;\r\n  }\r\n\r\n  @HostBinding('class')\r\n  get cssClass() {\r\n    let cls = 'datatable-body-row';\r\n    if (this.isSelected) {\r\n      cls += ' active';\r\n    }\r\n    if (this.rowIndex % 2 !== 0) {\r\n      cls += ' datatable-row-odd';\r\n    }\r\n    if (this.rowIndex % 2 === 0) {\r\n      cls += ' datatable-row-even';\r\n    }\r\n\r\n    if (this.rowClass) {\r\n      const res = this.rowClass(this.row);\r\n      if (typeof res === 'string') {\r\n        cls += ` ${res}`;\r\n      } else if (typeof res === 'object') {\r\n        const keys = Object.keys(res);\r\n        for (const k of keys) {\r\n          if (res[k] === true) {\r\n            cls += ` ${k}`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return cls;\r\n  }\r\n\r\n  @HostBinding('style.height.px')\r\n  @Input()\r\n  rowHeight: number;\r\n\r\n  @HostBinding('style.width.px')\r\n  get columnsTotalWidths(): string {\r\n    return this._columnGroupWidths.total;\r\n  }\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\r\n\r\n  _element: any;\r\n  _columnGroupWidths: any;\r\n  _columnsByPin: any;\r\n  _offsetX: number;\r\n  _columns: any[];\r\n  _innerWidth: number;\r\n  _groupStyles: { [prop: string]: {} } = {\r\n    left: {},\r\n    center: {},\r\n    right: {}\r\n  };\r\n\r\n  private _rowDiffer: KeyValueDiffer<{}, {}>;\r\n\r\n  constructor(\r\n    private differs: KeyValueDiffers,\r\n    @SkipSelf() private scrollbarHelper: ScrollbarHelper,\r\n    private cd: ChangeDetectorRef,\r\n    element: ElementRef\r\n  ) {\r\n    this._element = element.nativeElement;\r\n    this._rowDiffer = differs.find({}).create();\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    if (this._rowDiffer.diff(this.row)) {\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  trackByGroups(index: number, colGroup: any): any {\r\n    return colGroup.type;\r\n  }\r\n\r\n  columnTrackingFn(index: number, column: any): any {\r\n    return column.$$id;\r\n  }\r\n\r\n  buildStylesByGroup() {\r\n    this._groupStyles.left = this.calcStylesByGroup('left');\r\n    this._groupStyles.center = this.calcStylesByGroup('center');\r\n    this._groupStyles.right = this.calcStylesByGroup('right');\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  calcStylesByGroup(group: string) {\r\n    const widths = this._columnGroupWidths;\r\n    const offsetX = this.offsetX;\r\n\r\n    const styles = {\r\n      width: `${widths[group]}px`\r\n    };\r\n\r\n    if (group === 'left') {\r\n      translateXY(styles, offsetX, 0);\r\n    } else if (group === 'right') {\r\n      const bodyWidth = parseInt(this.innerWidth + '', 0);\r\n      const totalDiff = widths.total - bodyWidth;\r\n      const offsetDiff = totalDiff - offsetX;\r\n      const offset = (offsetDiff + this.scrollbarHelper.width) * -1;\r\n      translateXY(styles, offset, 0);\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  onActivate(event: any, index: number): void {\r\n    event.cellIndex = index;\r\n    event.rowElement = this._element;\r\n    this.activate.emit(event);\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  onKeyDown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n    const isTargetRow = event.target === this._element;\r\n\r\n    const isAction =\r\n      keyCode === Keys.return ||\r\n      keyCode === Keys.down ||\r\n      keyCode === Keys.up ||\r\n      keyCode === Keys.left ||\r\n      keyCode === Keys.right;\r\n\r\n    if (isAction && isTargetRow) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      this.activate.emit({\r\n        type: 'keydown',\r\n        event,\r\n        row: this.row,\r\n        rowElement: this._element\r\n      });\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseenter', ['$event'])\r\n  onMouseenter(event: any): void {\r\n    this.activate.emit({\r\n      type: 'mouseenter',\r\n      event,\r\n      row: this.row,\r\n      rowElement: this._element\r\n    });\r\n  }\r\n\r\n  recalculateColumns(val: any[] = this.columns): void {\r\n    this._columns = val;\r\n    const colsByPin = columnsByPin(this._columns);\r\n    this._columnsByPin = columnsByPinArr(this._columns);\r\n    this._columnGroupWidths = columnGroupWidths(colsByPin, this._columns);\r\n  }\r\n\r\n  onTreeAction() {\r\n    this.treeAction.emit();\r\n  }\r\n}\r\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\n\n@Component({\n  selector: 'datatable-row-wrapper',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div *ngIf=\"groupHeader && groupHeader.template\" class=\"datatable-group-header\" [ngStyle]=\"getGroupHeaderStyle()\">\n      <ng-template\n        *ngIf=\"groupHeader && groupHeader.template\"\n        [ngTemplateOutlet]=\"groupHeader.template\"\n        [ngTemplateOutletContext]=\"groupContext\"\n      >\n      </ng-template>\n    </div>\n    <ng-content *ngIf=\"(groupHeader && groupHeader.template && expanded) || (!groupHeader || !groupHeader.template)\">\n    </ng-content>\n    <div\n      *ngIf=\"rowDetail && rowDetail.template && expanded\"\n      [style.height.px]=\"detailRowHeight\"\n      class=\"datatable-row-detail\"\n    >\n      <ng-template\n        *ngIf=\"rowDetail && rowDetail.template\"\n        [ngTemplateOutlet]=\"rowDetail.template\"\n        [ngTemplateOutletContext]=\"rowContext\"\n      >\n      </ng-template>\n    </div>\n  `,\n  host: {\n    class: 'datatable-row-wrapper'\n  }\n})\nexport class DataTableRowWrapperComponent implements OnChanges {\n  @Input() innerWidth: number;\n  @Input() rowDetail: any;\n  @Input() groupHeader: any;\n  @Input() offsetX: number;\n  @Input() detailRowHeight: any;\n  @Input() row: any;\n  @Input() groupedRows: any;\n  @Output() rowContextmenu = new EventEmitter<{ event: MouseEvent; row: any }>(false);\n\n  @Input() set rowIndex(val: number) {\n    this._rowIndex = val;\n    this.rowContext.rowIndex = val;\n    this.groupContext.rowIndex = val;\n    this.cd.markForCheck();\n  }\n\n  get rowIndex(): number {\n    return this._rowIndex;\n  }\n\n  @Input() set expanded(val: boolean) {\n    this._expanded = val;\n    this.groupContext.expanded = val;\n    this.rowContext.expanded = val;\n    this.cd.markForCheck();\n  }\n\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  groupContext: any = {\n    group: this.row,\n    expanded: this.expanded,\n    rowIndex: this.rowIndex\n  };\n\n  rowContext: any = {\n    row: this.row,\n    expanded: this.expanded,\n    rowIndex: this.rowIndex\n  };\n\n  private _expanded: boolean = false;\n  private _rowIndex: number;\n\n  constructor(private cd: ChangeDetectorRef) {\n  }\n\n  ngOnChanges({ row: rowChange }: SimpleChanges): void {\n    if (rowChange) {\n      this.rowContext.row = this.row;\n      this.groupContext.group = this.row;\n      this.cd.markForCheck();\n    }\n  }\n\n  @HostListener('contextmenu', ['$event'])\n  onContextmenu($event: MouseEvent): void {\n    this.rowContextmenu.emit({ event: $event, row: this.row });\n  }\n\n  getGroupHeaderStyle(): any {\n    const styles = {};\n\n    styles['transform'] = 'translate3d(' + this.offsetX + 'px, 0px, 0px)';\n    styles['backface-visibility'] = 'hidden';\n    styles['width'] = this.innerWidth;\n\n    return styles;\n  }\n}\n","import {\r\n  Component,\r\n  Input,\r\n  PipeTransform,\r\n  HostBinding,\r\n  ViewChild,\r\n  ChangeDetectorRef,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ElementRef,\r\n  ViewContainerRef,\r\n  OnDestroy,\r\n  DoCheck,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { TableColumn } from '../../types/table-column.type';\r\nimport { MouseEvent, KeyboardEvent } from '../../events';\r\nimport { SortDirection } from '../../types/sort-direction.type';\r\nimport { Keys } from '../../utils/keys';\r\n\r\nexport type TreeStatus = 'collapsed' | 'expanded' | 'loading' | 'disabled';\r\n\r\n@Component({\r\n  selector: 'datatable-body-cell',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div class=\"datatable-body-cell-label\" [style.margin-left.px]=\"calcLeftMargin(column, row)\">\r\n      <label\r\n        *ngIf=\"column.checkboxable && (!displayCheck || displayCheck(row, column, value))\"\r\n        class=\"datatable-checkbox\"\r\n      >\r\n        <input type=\"checkbox\" [checked]=\"isSelected\" (click)=\"onCheckboxChange($event)\" />\r\n      </label>\r\n      <ng-container *ngIf=\"column.isTreeColumn\">\r\n        <button\r\n          *ngIf=\"!column.treeToggleTemplate\"\r\n          class=\"datatable-tree-button\"\r\n          [disabled]=\"treeStatus === 'disabled'\"\r\n          (click)=\"onTreeAction()\"\r\n        >\r\n          <span>\r\n            <i *ngIf=\"treeStatus === 'loading'\" class=\"icon datatable-icon-collapse\"></i>\r\n            <i *ngIf=\"treeStatus === 'collapsed'\" class=\"icon datatable-icon-up\"></i>\r\n            <i *ngIf=\"treeStatus === 'expanded' || treeStatus === 'disabled'\" class=\"icon datatable-icon-down\"></i>\r\n          </span>\r\n        </button>\r\n        <ng-template\r\n          *ngIf=\"column.treeToggleTemplate\"\r\n          [ngTemplateOutlet]=\"column.treeToggleTemplate\"\r\n          [ngTemplateOutletContext]=\"{ cellContext: cellContext }\"\r\n        >\r\n        </ng-template>\r\n      </ng-container>\r\n\r\n      <span *ngIf=\"!column.cellTemplate\" [title]=\"sanitizedValue\" [innerHTML]=\"value\"> </span>\r\n      <ng-template\r\n        #cellTemplate\r\n        *ngIf=\"column.cellTemplate\"\r\n        [ngTemplateOutlet]=\"column.cellTemplate\"\r\n        [ngTemplateOutletContext]=\"cellContext\"\r\n      >\r\n      </ng-template>\r\n    </div>\r\n  `\r\n})\r\nexport class DataTableBodyCellComponent implements DoCheck, OnDestroy {\r\n  @Input() displayCheck: (row: any, column?: TableColumn, value?: any) => boolean;\r\n\r\n  @Input() set group(group: any) {\r\n    this._group = group;\r\n    this.cellContext.group = group;\r\n    this.checkValueUpdates();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get group() {\r\n    return this._group;\r\n  }\r\n\r\n  @Input() set rowHeight(val: number) {\r\n    this._rowHeight = val;\r\n    this.cellContext.rowHeight = val;\r\n    this.checkValueUpdates();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get rowHeight() {\r\n    return this._rowHeight;\r\n  }\r\n\r\n  @Input() set isSelected(val: boolean) {\r\n    this._isSelected = val;\r\n    this.cellContext.isSelected = val;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get isSelected(): boolean {\r\n    return this._isSelected;\r\n  }\r\n\r\n  @Input() set expanded(val: boolean) {\r\n    this._expanded = val;\r\n    this.cellContext.expanded = val;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get expanded(): boolean {\r\n    return this._expanded;\r\n  }\r\n\r\n  @Input() set rowIndex(val: number) {\r\n    this._rowIndex = val;\r\n    this.cellContext.rowIndex = val;\r\n    this.checkValueUpdates();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get rowIndex(): number {\r\n    return this._rowIndex;\r\n  }\r\n\r\n  @Input() set column(column: TableColumn) {\r\n    this._column = column;\r\n    this.cellContext.column = column;\r\n    this.checkValueUpdates();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get column(): TableColumn {\r\n    return this._column;\r\n  }\r\n\r\n  @Input() set row(row: any) {\r\n    this._row = row;\r\n    this.cellContext.row = row;\r\n    this.checkValueUpdates();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get row(): any {\r\n    return this._row;\r\n  }\r\n\r\n  @Input() set sorts(val: any[]) {\r\n    this._sorts = val;\r\n    this.calcSortDir = this.calcSortDir(val);\r\n  }\r\n\r\n  get sorts(): any[] {\r\n    return this._sorts;\r\n  }\r\n\r\n  @Input() set treeStatus(status: TreeStatus) {\r\n    if (status !== 'collapsed' && status !== 'expanded' && status !== 'loading' && status !== 'disabled') {\r\n      this._treeStatus = 'collapsed';\r\n    } else {\r\n      this._treeStatus = status;\r\n    }\r\n    this.cellContext.treeStatus = this._treeStatus;\r\n    this.checkValueUpdates();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  get treeStatus(): TreeStatus {\r\n    return this._treeStatus;\r\n  }\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ViewChild('cellTemplate', { read: ViewContainerRef, static: true })\r\n  cellTemplate: ViewContainerRef;\r\n\r\n  @HostBinding('class')\r\n  get columnCssClasses(): any {\r\n    let cls = 'datatable-body-cell';\r\n    if (this.column.cellClass) {\r\n      if (typeof this.column.cellClass === 'string') {\r\n        cls += ' ' + this.column.cellClass;\r\n      } else if (typeof this.column.cellClass === 'function') {\r\n        const res = this.column.cellClass({\r\n          row: this.row,\r\n          group: this.group,\r\n          column: this.column,\r\n          value: this.value,\r\n          rowHeight: this.rowHeight\r\n        });\r\n\r\n        if (typeof res === 'string') {\r\n          cls += res;\r\n        } else if (typeof res === 'object') {\r\n          const keys = Object.keys(res);\r\n          for (const k of keys) {\r\n            if (res[k] === true) {\r\n              cls += ` ${k}`;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (!this.sortDir) {\r\n      cls += ' sort-active';\r\n    }\r\n    if (this.isFocused) {\r\n      cls += ' active';\r\n    }\r\n    if (this.sortDir === SortDirection.asc) {\r\n      cls += ' sort-asc';\r\n    }\r\n    if (this.sortDir === SortDirection.desc) {\r\n      cls += ' sort-desc';\r\n    }\r\n\r\n    return cls;\r\n  }\r\n\r\n  @HostBinding('style.width.px')\r\n  get width(): number {\r\n    return this.column.width;\r\n  }\r\n\r\n  @HostBinding('style.minWidth.px')\r\n  get minWidth(): number {\r\n    return this.column.minWidth;\r\n  }\r\n\r\n  @HostBinding('style.maxWidth.px')\r\n  get maxWidth(): number {\r\n    return this.column.maxWidth;\r\n  }\r\n\r\n  @HostBinding('style.height')\r\n  get height(): string | number {\r\n    const height = this.rowHeight;\r\n    if (isNaN(height)) {\r\n      return height;\r\n    }\r\n    return height + 'px';\r\n  }\r\n\r\n  sanitizedValue: any;\r\n  value: any;\r\n  sortDir: SortDirection;\r\n  isFocused = false;\r\n  onCheckboxChangeFn = this.onCheckboxChange.bind(this);\r\n  activateFn = this.activate.emit.bind(this.activate);\r\n\r\n  cellContext: any = {\r\n    onCheckboxChangeFn: this.onCheckboxChangeFn,\r\n    activateFn: this.activateFn,\r\n    row: this.row,\r\n    group: this.group,\r\n    value: this.value,\r\n    column: this.column,\r\n    rowHeight: this.rowHeight,\r\n    isSelected: this.isSelected,\r\n    rowIndex: this.rowIndex,\r\n    treeStatus: this.treeStatus,\r\n    onTreeAction: this.onTreeAction.bind(this)\r\n  };\r\n\r\n  private _isSelected: boolean;\r\n  private _sorts: any[];\r\n  private _column: TableColumn;\r\n  private _row: any;\r\n  private _group: any;\r\n  private _rowHeight: number;\r\n  private _rowIndex: number;\r\n  private _expanded: boolean;\r\n  private _element: any;\r\n  private _treeStatus: TreeStatus;\r\n\r\n  constructor(element: ElementRef, private cd: ChangeDetectorRef) {\r\n    this._element = element.nativeElement;\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    this.checkValueUpdates();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.cellTemplate) {\r\n      this.cellTemplate.clear();\r\n    }\r\n  }\r\n\r\n  checkValueUpdates(): void {\r\n    let value = '';\r\n\r\n    if (!this.row || !this.column) {\r\n      value = '';\r\n    } else {\r\n      const val = this.column.$$valueGetter(this.row, this.column.prop);\r\n      const userPipe: PipeTransform = this.column.pipe;\r\n\r\n      if (userPipe) {\r\n        value = userPipe.transform(val);\r\n      } else if (value !== undefined) {\r\n        value = val;\r\n      }\r\n    }\r\n\r\n    if (this.value !== value) {\r\n      this.value = value;\r\n      this.cellContext.value = value;\r\n      this.sanitizedValue = value !== null && value !== undefined ? this.stripHtml(value) : value;\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  @HostListener('focus')\r\n  onFocus(): void {\r\n    this.isFocused = true;\r\n  }\r\n\r\n  @HostListener('blur')\r\n  onBlur(): void {\r\n    this.isFocused = false;\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    this.activate.emit({\r\n      type: 'click',\r\n      event,\r\n      row: this.row,\r\n      group: this.group,\r\n      rowHeight: this.rowHeight,\r\n      column: this.column,\r\n      value: this.value,\r\n      cellElement: this._element\r\n    });\r\n  }\r\n\r\n  @HostListener('dblclick', ['$event'])\r\n  onDblClick(event: MouseEvent): void {\r\n    this.activate.emit({\r\n      type: 'dblclick',\r\n      event,\r\n      row: this.row,\r\n      group: this.group,\r\n      rowHeight: this.rowHeight,\r\n      column: this.column,\r\n      value: this.value,\r\n      cellElement: this._element\r\n    });\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  onKeyDown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n    const isTargetCell = event.target === this._element;\r\n\r\n    const isAction =\r\n      keyCode === Keys.return ||\r\n      keyCode === Keys.down ||\r\n      keyCode === Keys.up ||\r\n      keyCode === Keys.left ||\r\n      keyCode === Keys.right;\r\n\r\n    if (isAction && isTargetCell) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      this.activate.emit({\r\n        type: 'keydown',\r\n        event,\r\n        row: this.row,\r\n        group: this.group,\r\n        rowHeight: this.rowHeight,\r\n        column: this.column,\r\n        value: this.value,\r\n        cellElement: this._element\r\n      });\r\n    }\r\n  }\r\n\r\n  onCheckboxChange(event: any): void {\r\n    this.activate.emit({\r\n      type: 'checkbox',\r\n      event,\r\n      row: this.row,\r\n      group: this.group,\r\n      rowHeight: this.rowHeight,\r\n      column: this.column,\r\n      value: this.value,\r\n      cellElement: this._element,\r\n      treeStatus: 'collapsed'\r\n    });\r\n  }\r\n\r\n  calcSortDir(sorts: any[]): any {\r\n    if (!sorts) {\r\n      return;\r\n    }\r\n\r\n    const sort = sorts.find((s: any) => {\r\n      return s.prop === this.column.prop;\r\n    });\r\n\r\n    if (sort) {\r\n      return sort.dir;\r\n    }\r\n  }\r\n\r\n  stripHtml(html: string): string {\r\n    if (!html.replace) {\r\n      return html;\r\n    }\r\n    return html.replace(/<\\/?[^>]+(>|$)/g, '');\r\n  }\r\n\r\n  onTreeAction() {\r\n    this.treeAction.emit(this.row);\r\n  }\r\n\r\n  calcLeftMargin(column: any, row: any) {\r\n    const levelIndent = column.treeLevelIndent != null ? column.treeLevelIndent : 50;\r\n    return column.isTreeColumn ? row.level * levelIndent : 0;\r\n  }\r\n}\r\n","export function selectRows(selected: any[], row: any, comparefn: any) {\r\n  const selectedIndex = comparefn(row, selected);\r\n\r\n  if (selectedIndex > -1) {\r\n    selected.splice(selectedIndex, 1);\r\n  } else {\r\n    selected.push(row);\r\n  }\r\n\r\n  return selected;\r\n}\r\n\r\nexport function selectRowsBetween(\r\n  selected: any[],\r\n  rows: any[],\r\n  index: number,\r\n  prevIndex: number,\r\n  comparefn: any\r\n): any[] {\r\n  const reverse = index < prevIndex;\r\n\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const row = rows[i];\r\n    const greater = i >= prevIndex && i <= index;\r\n    const lesser = i <= prevIndex && i >= index;\r\n\r\n    let range = { start: 0, end: 0 };\r\n    if (reverse) {\r\n      range = {\r\n        start: index,\r\n        end: prevIndex\r\n      };\r\n    } else {\r\n      range = {\r\n        start: prevIndex,\r\n        end: index + 1\r\n      };\r\n    }\r\n\r\n    if ((reverse && lesser) || (!reverse && greater)) {\r\n      // if in the positive range to be added to `selected`, and\r\n      // not already in the selected array, add it\r\n      if (i >= range.start && i <= range.end) {\r\n        selected.push(row);\r\n      }\r\n    }\r\n  }\r\n\r\n  return selected;\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\r\nimport { SelectionType } from '../../types/selection.type';\r\nimport { selectRowsBetween, selectRows } from '../../utils/selection';\r\nimport { Keys } from '../../utils/keys';\r\n\r\nexport interface Model {\r\n  type: string;\r\n  event: MouseEvent | KeyboardEvent;\r\n  row: any;\r\n  rowElement: any;\r\n  cellElement: any;\r\n  cellIndex: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'datatable-selection',\r\n  template: `\r\n    <ng-content></ng-content>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTableSelectionComponent {\r\n  @Input() rows: any[];\r\n  @Input() selected: any[];\r\n  @Input() selectEnabled: boolean;\r\n  @Input() selectionType: SelectionType;\r\n  @Input() rowIdentity: any;\r\n  @Input() selectCheck: any;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n\r\n  prevIndex: number;\r\n\r\n  selectRow(event: KeyboardEvent | MouseEvent, index: number, row: any): void {\r\n    if (!this.selectEnabled) return;\r\n\r\n    const chkbox = this.selectionType === SelectionType.checkbox;\r\n    const multi = this.selectionType === SelectionType.multi;\r\n    const multiClick = this.selectionType === SelectionType.multiClick;\r\n    let selected: any[] = [];\r\n\r\n    if (multi || chkbox || multiClick) {\r\n      if (event.shiftKey) {\r\n        selected = selectRowsBetween([], this.rows, index, this.prevIndex, this.getRowSelectedIdx.bind(this));\r\n      } else if (event.ctrlKey || event.metaKey || multiClick || chkbox) {\r\n        selected = selectRows([...this.selected], row, this.getRowSelectedIdx.bind(this));\r\n      } else {\r\n        selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\r\n      }\r\n    } else {\r\n      selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\r\n    }\r\n\r\n    if (typeof this.selectCheck === 'function') {\r\n      selected = selected.filter(this.selectCheck.bind(this));\r\n    }\r\n\r\n    this.selected.splice(0, this.selected.length);\r\n    this.selected.push(...selected);\r\n\r\n    this.prevIndex = index;\r\n\r\n    this.select.emit({\r\n      selected\r\n    });\r\n  }\r\n\r\n  onActivate(model: Model, index: number): void {\r\n    const { type, event, row } = model;\r\n    const chkbox = this.selectionType === SelectionType.checkbox;\r\n    const select = (!chkbox && (type === 'click' || type === 'dblclick')) || (chkbox && type === 'checkbox');\r\n\r\n    if (select) {\r\n      this.selectRow(event, index, row);\r\n    } else if (type === 'keydown') {\r\n      if ((<KeyboardEvent>event).keyCode === Keys.return) {\r\n        this.selectRow(event, index, row);\r\n      } else {\r\n        this.onKeyboardFocus(model);\r\n      }\r\n    }\r\n    this.activate.emit(model);\r\n  }\r\n\r\n  onKeyboardFocus(model: Model): void {\r\n    const { keyCode } = <KeyboardEvent>model.event;\r\n    const shouldFocus = keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.right || keyCode === Keys.left;\r\n\r\n    if (shouldFocus) {\r\n      const isCellSelection = this.selectionType === SelectionType.cell;\r\n\r\n      if (!model.cellElement || !isCellSelection) {\r\n        this.focusRow(model.rowElement, keyCode);\r\n      } else if (isCellSelection) {\r\n        this.focusCell(model.cellElement, model.rowElement, keyCode, model.cellIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  focusRow(rowElement: any, keyCode: number): void {\r\n    const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\r\n    if (nextRowElement) nextRowElement.focus();\r\n  }\r\n\r\n  getPrevNextRow(rowElement: any, keyCode: number): any {\r\n    const parentElement = rowElement.parentElement;\r\n\r\n    if (parentElement) {\r\n      let focusElement: HTMLElement;\r\n      if (keyCode === Keys.up) {\r\n        focusElement = parentElement.previousElementSibling;\r\n      } else if (keyCode === Keys.down) {\r\n        focusElement = parentElement.nextElementSibling;\r\n      }\r\n\r\n      if (focusElement && focusElement.children.length) {\r\n        return focusElement.children[0];\r\n      }\r\n    }\r\n  }\r\n\r\n  focusCell(cellElement: any, rowElement: any, keyCode: number, cellIndex: number): void {\r\n    let nextCellElement: HTMLElement;\r\n\r\n    if (keyCode === Keys.left) {\r\n      nextCellElement = cellElement.previousElementSibling;\r\n    } else if (keyCode === Keys.right) {\r\n      nextCellElement = cellElement.nextElementSibling;\r\n    } else if (keyCode === Keys.up || keyCode === Keys.down) {\r\n      const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\r\n      if (nextRowElement) {\r\n        const children = nextRowElement.getElementsByClassName('datatable-body-cell');\r\n        if (children.length) nextCellElement = children[cellIndex];\r\n      }\r\n    }\r\n\r\n    if (nextCellElement) nextCellElement.focus();\r\n  }\r\n\r\n  getRowSelected(row: any): boolean {\r\n    return this.getRowSelectedIdx(row, this.selected) > -1;\r\n  }\r\n\r\n  getRowSelectedIdx(row: any, selected: any[]): number {\r\n    if (!selected || !selected.length) return -1;\r\n\r\n    const rowId = this.rowIdentity(row);\r\n    return selected.findIndex(r => {\r\n      const id = this.rowIdentity(r);\r\n      return id === rowId;\r\n    });\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, PipeTransform, TemplateRef } from '@angular/core';\r\n\r\nexport interface ISummaryColumn {\r\n  summaryFunc?: (cells: any[]) => any;\r\n  summaryTemplate?: TemplateRef<any>;\r\n\r\n  prop: string;\r\n  pipe?: PipeTransform;\r\n}\r\n\r\nfunction defaultSumFunc(cells: any[]): any {\r\n  const cellsWithValues = cells.filter(cell => !!cell);\r\n\r\n  if (!cellsWithValues.length) {\r\n    return null;\r\n  }\r\n  if (cellsWithValues.some(cell => typeof cell !== 'number')) {\r\n    return null;\r\n  }\r\n\r\n  return cellsWithValues.reduce((res, cell) => res + cell);\r\n}\r\n\r\nfunction noopSumFunc(cells: any[]): void {\r\n  return null;\r\n}\r\n\r\n@Component({\r\n  selector: 'datatable-summary-row',\r\n  template: `\r\n    <datatable-body-row\r\n      *ngIf=\"summaryRow && _internalColumns\"\r\n      tabindex=\"-1\"\r\n      [innerWidth]=\"innerWidth\"\r\n      [offsetX]=\"offsetX\"\r\n      [columns]=\"_internalColumns\"\r\n      [rowHeight]=\"rowHeight\"\r\n      [row]=\"summaryRow\"\r\n      [rowIndex]=\"-1\"\r\n    >\r\n    </datatable-body-row>\r\n  `,\r\n  host: {\r\n    class: 'datatable-summary-row'\r\n  }\r\n})\r\nexport class DataTableSummaryRowComponent implements OnChanges {\r\n  @Input() rows: any[];\r\n  @Input() columns: ISummaryColumn[];\r\n\r\n  @Input() rowHeight: number;\r\n  @Input() offsetX: number;\r\n  @Input() innerWidth: number;\r\n\r\n  _internalColumns: ISummaryColumn[];\r\n  summaryRow: any = {};\r\n\r\n  ngOnChanges() {\r\n    if (!this.columns || !this.rows) {\r\n      return;\r\n    }\r\n    this.updateInternalColumns();\r\n    this.updateValues();\r\n  }\r\n\r\n  private updateInternalColumns() {\r\n    this._internalColumns = this.columns.map(col => ({\r\n      ...col,\r\n      cellTemplate: col.summaryTemplate\r\n    }));\r\n  }\r\n\r\n  private updateValues() {\r\n    this.summaryRow = {};\r\n\r\n    this.columns\r\n      .filter(col => !col.summaryTemplate)\r\n      .forEach(col => {\r\n        const cellsFromSingleColumn = this.rows.map(row => row[col.prop]);\r\n        const sumFunc = this.getSummaryFunction(col);\r\n\r\n        this.summaryRow[col.prop] = col.pipe\r\n          ? col.pipe.transform(sumFunc(cellsFromSingleColumn))\r\n          : sumFunc(cellsFromSingleColumn);\r\n      });\r\n  }\r\n\r\n  private getSummaryFunction(column: ISummaryColumn): (a: any[]) => any {\r\n    if (column.summaryFunc === undefined) {\r\n      return defaultSumFunc;\r\n    } else if (column.summaryFunc === null) {\r\n      return noopSumFunc;\r\n    } else {\r\n      return column.summaryFunc;\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ScrollbarHelper } from './services/scrollbar-helper.service';\r\nimport { DimensionsHelper } from './services/dimensions-helper.service';\r\nimport { ColumnChangesService } from './services/column-changes.service';\r\nimport { DataTableFooterTemplateDirective } from './components/footer/footer-template.directive';\r\nimport { VisibilityDirective } from './directives/visibility.directive';\r\nimport { DraggableDirective } from './directives/draggable.directive';\r\nimport { ResizeableDirective } from './directives/resizeable.directive';\r\nimport { OrderableDirective } from './directives/orderable.directive';\r\nimport { LongPressDirective } from './directives/long-press.directive';\r\nimport { ScrollerComponent } from './components/body/scroller.component';\r\nimport { DatatableComponent } from './components/datatable.component';\r\nimport { DataTableColumnDirective } from './components/columns/column.directive';\r\nimport { DataTableHeaderComponent } from './components/header/header.component';\r\nimport { DataTableHeaderCellComponent } from './components/header/header-cell.component';\r\nimport { DataTableBodyComponent } from './components/body/body.component';\r\nimport { DataTableFooterComponent } from './components/footer/footer.component';\r\nimport { DataTablePagerComponent } from './components/footer/pager.component';\r\nimport { ProgressBarComponent } from './components/body/progress-bar.component';\r\nimport { DataTableBodyRowComponent } from './components/body/body-row.component';\r\nimport { DataTableRowWrapperComponent } from './components/body/body-row-wrapper.component';\r\nimport { DatatableRowDetailDirective } from './components/row-detail/row-detail.directive';\r\nimport { DatatableGroupHeaderDirective } from './components/body/body-group-header.directive';\r\nimport { DatatableRowDetailTemplateDirective } from './components/row-detail/row-detail-template.directive';\r\nimport { DataTableBodyCellComponent } from './components/body/body-cell.component';\r\nimport { DataTableSelectionComponent } from './components/body/selection.component';\r\nimport { DataTableColumnHeaderDirective } from './components/columns/column-header.directive';\r\nimport { DataTableColumnCellDirective } from './components/columns/column-cell.directive';\r\nimport { DataTableColumnCellTreeToggle } from './components/columns/tree.directive';\r\nimport { DatatableFooterDirective } from './components/footer/footer.directive';\r\nimport { DatatableGroupHeaderTemplateDirective } from './components/body/body-group-header-template.directive';\r\nimport { DataTableSummaryRowComponent } from './components/body/summary/summary-row.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService],\r\n  declarations: [\r\n    DataTableFooterTemplateDirective,\r\n    VisibilityDirective,\r\n    DraggableDirective,\r\n    ResizeableDirective,\r\n    OrderableDirective,\r\n    LongPressDirective,\r\n    ScrollerComponent,\r\n    DatatableComponent,\r\n    DataTableColumnDirective,\r\n    DataTableHeaderComponent,\r\n    DataTableHeaderCellComponent,\r\n    DataTableBodyComponent,\r\n    DataTableFooterComponent,\r\n    DataTablePagerComponent,\r\n    ProgressBarComponent,\r\n    DataTableBodyRowComponent,\r\n    DataTableRowWrapperComponent,\r\n    DatatableRowDetailDirective,\r\n    DatatableGroupHeaderDirective,\r\n    DatatableRowDetailTemplateDirective,\r\n    DataTableBodyCellComponent,\r\n    DataTableSelectionComponent,\r\n    DataTableColumnHeaderDirective,\r\n    DataTableColumnCellDirective,\r\n    DataTableColumnCellTreeToggle,\r\n    DatatableFooterDirective,\r\n    DatatableGroupHeaderTemplateDirective,\r\n    DataTableSummaryRowComponent\r\n  ],\r\n  exports: [\r\n    DatatableComponent,\r\n    DatatableRowDetailDirective,\r\n    DatatableGroupHeaderDirective,\r\n    DatatableRowDetailTemplateDirective,\r\n    DataTableColumnDirective,\r\n    DataTableColumnHeaderDirective,\r\n    DataTableColumnCellDirective,\r\n    DataTableColumnCellTreeToggle,\r\n    DataTableFooterTemplateDirective,\r\n    DatatableFooterDirective,\r\n    DataTablePagerComponent,\r\n    DatatableGroupHeaderTemplateDirective\r\n  ]\r\n})\r\nexport class NgxDatatableModule {\r\n  /**\r\n   * Configure global configuration via INgxDatatableConfig\r\n   * @param configuration\r\n   */\r\n  static forRoot(configuration: INgxDatatableConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxDatatableModule,\r\n      providers: [{ provide: 'configuration', useValue: configuration }]\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Interface definition for INgxDatatableConfig global configuration\r\n */\r\nexport interface INgxDatatableConfig {\r\n  messages: {\r\n    emptyMessage: string; // Message to show when array is presented, but contains no values\r\n    totalMessage: string; // Footer total message\r\n    selectedMessage: string; // Footer selected message\r\n  };\r\n}\r\n","if (typeof document !== 'undefined' && !document.elementsFromPoint) {\r\n  document.elementsFromPoint = elementsFromPoint;\r\n}\r\n\r\n/*tslint:disable*/\r\n/**\r\n * Polyfill for `elementsFromPoint`\r\n *\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint\r\n * https://gist.github.com/iddan/54d5d9e58311b0495a91bf06de661380\r\n * https://gist.github.com/oslego/7265412\r\n */\r\nexport function elementsFromPoint(x: number, y: number) {\r\n  const elements = [];\r\n  const previousPointerEvents = [];\r\n  let current: any; // TODO: window.getComputedStyle should be used with inferred type (Element)\r\n  let i;\r\n  let d;\r\n\r\n  //if (document === undefined) return elements;\r\n\r\n  // get all elements via elementFromPoint, and remove them from hit-testing in order\r\n  while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1 && current != null) {\r\n    // push the element and its current style\r\n    elements.push(current);\r\n    previousPointerEvents.push({\r\n      value: current.style.getPropertyValue('pointer-events'),\r\n      priority: current.style.getPropertyPriority('pointer-events')\r\n    });\r\n\r\n    // add \"pointer-events: none\", to get to the underlying element\r\n    current.style.setProperty('pointer-events', 'none', 'important');\r\n  }\r\n\r\n  // restore the previous pointer-events values\r\n  for (i = previousPointerEvents.length; (d = previousPointerEvents[--i]); ) {\r\n    elements[i].style.setProperty('pointer-events', d.value ? d.value : '', d.priority);\r\n  }\r\n\r\n  // return our results\r\n  return elements;\r\n}\r\n/*tslint:enable*/\r\n","export enum ClickType {\r\n  single = 'single',\r\n  double = 'double'\r\n}\r\n"]}